<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:ni="urn:ni">
  <assembly>
    <name>NationalInstruments.Common</name>
  </assembly>
  <members>
    <member name="T:NationalInstruments.ISynchronizeCallbacks">
      <summary>
            Specifies that an object can use an ISynchronizeInvoke implementation
            to customize how events and callback delegates are invoked.
            </summary>
    </member>
    <member name="P:NationalInstruments.ISynchronizeCallbacks.SynchronizingObject">
      <summary>
            Gets or sets the object that marshals event-handler and callback calls.
            </summary>
    </member>
    <member name="T:NationalInstruments.EventSynchronizationCallback`1">
      <summary>
            Represents a method that is called to raise an event.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformTestResult">
      <summary>
            Provides a test result from comparing an expected digital waveform against the compared waveform.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformTestResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the DigitalWaveformTestResult with the info and 
            context.
            </summary>
      <param name="info">
            The data needed to serialize or deserialize an object.
            </param>
      <param name="context">
            The source and destination of a given serialized stream.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformTestResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Returns the data needed to serialize the DigitalWaveformTestResult.
            </summary>
      <param name="info">
            A SerializationInfo object containing the information required to serialize the
            DigitalWaveformTestResult.
            </param>
      <param name="context">
            A StreamingContext object.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformTestResult.GetFailures">
      <summary>
            Returns a DigitalWaveformFailure array containing failure information.
            </summary>
      <returns>
            The DigitalWaveformFailure array containing failure information.
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformTestResult.Success">
      <summary>
            Returns if the test is successful.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformSample">
      <summary>
            Represents a sample of a digital waveform.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSample.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to the specified
            DigitalWaveformSample.
            </summary>
      <param name="obj">
            The DigitalWaveformSample to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is a DigitalWaveformSample that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSample.Equals(NationalInstruments.DigitalWaveformSample)">
      <summary>
            Returns a value indicating whether this instance is equal to the specified
            DigitalWaveformSample.
            </summary>
      <param name="sample">
            The DigitalWaveformSample to compare with this
            instance.
            </param>
      <returns>true if sample (parameter) is a DigitalWaveformSample that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSample.GetHashCode">
      <summary>
            Returns a hash code for the object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSample.TryConvert(System.Int64@)">
      <summary>
            Converts the DigitalWaveformSample to a 64-bit bus value.
            </summary>
      <param name="busValue">
            Upon return, contains the bus value of the DigitalWaveformSample. 
            </param>
      <returns>true if the bus value can convert to a 64-bit bus value. 
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSample.Owner">
      <summary>
            Gets the DigitalWaveform that the sample came from.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSample.HasTimeStamp">
      <summary>
            Gets a value indicating whether the digital sample has a TimeStamp.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSample.TimeStamp">
      <summary>
            The time stamp of the digital sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSample.PrecisionTimeStamp">
      <summary>
            The time stamp of the digital sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSample.States">
      <summary>
            Gets the collection of digital states that are part of the sample.
            </summary>
    </member>
    <member name="T:NationalInstruments.ComplexWaveformScaleMode">
      <summary>
            Represents a class used to scale complex waveform data.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformScaleMode.#ctor">
      <summary>
            Initializes a new instance of the ComplexWaveformScaleMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformScaleMode.GetScaledData``1(NationalInstruments.ComplexWaveform{``0})">
      <summary>
            Returns the scaled complex waveform data.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <typeparam name="TData">
            The underlying type of waveform (parameter). TData (generic type parameter) supports the ComplexDouble
            and ComplexInt16 data types. 
            			</typeparam>
      <returns>
            The scaled data.
            </returns>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformScaleMode.GetScaledData``1(NationalInstruments.ComplexWaveform{``0},System.Int32,System.Int32)">
      <summary>
            Returns the scaled complex waveform data using the specified sample index and count.
            </summary>
      <typeparam name="TData">
            The underlying type of waveform (parameter). TData (generic type parameter) supports the ComplexDouble
            and ComplexInt16 data types. 
            			</typeparam>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <param name="sampleIndex">
            The start index.
            </param>
      <param name="count">
            The amount of scaled data to return.
            </param>
      <returns>
            The scaled data.
            </returns>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            - or -
            

sampleIndex (parameter) is less than zero.
            


            - or -
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            - or -
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformScaleMode.GetScaledData``1(NationalInstruments.ComplexWaveform{``0},System.Int32,System.Int32,NationalInstruments.ComplexDouble[],System.Int32)">
      <summary>
            Returns the scaled complex waveform data using the specified sample index, count, and array index.
            </summary>
      <typeparam name="TData">
            The underlying type of waveform (parameter). TData (generic type parameter) supports the ComplexDouble and
            ComplexInt16 data types. 
            			</typeparam>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The amount of scaled data to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the scaled data into.
            </param>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            - or -
            sampleIndex (parameter) is less than zero.
            
            - or -
            arrayIndex (parameter) is less than zero.
            
            - or -
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            - or -
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformScaleMode.TransformData(NationalInstruments.ComplexDouble[])">
      <summary>
            Returns the transformed data.
            </summary>
      <param name="data">
            The raw, untransformed data.
            </param>
      <returns>
            The transformed data.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformScaleMode.CreateLinearMode(System.Double,System.Double)">
      <summary>
            Creates a ComplexWaveformScaleMode that scales the complex data linearly.
            </summary>
      <param name="gain">
            The gain of the linear scale.
            </param>
      <param name="offset">
            The offset of the linear scale.
            </param>
      <returns>
            A ComplexWaveformScaleMode that scales data linearly.
            </returns>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformScaleMode.None">
      <summary>
            Gets a ComplexWaveformScaleMode that does not scale data.
            </summary>
    </member>
    <member name="T:NationalInstruments.ComplexWaveformCollection`1">
      <summary>
            Represents a strongly typed collection of ComplexWaveform&lt;T&gt; objects.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveforms. TData (generic type parameter) supports the ComplexDouble and
            ComplexInt16 data types. 
            			</typeparam>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformCollection`1.#ctor">
      <summary>
            Initializes a new instance of ComplexWaveformCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformCollection`1.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformCollection`1.CopyTo(NationalInstruments.ComplexWaveform{`0}[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="arrayIndex">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">arrayIndex (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            arrayIndex (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#IEnumerable{NationalInstruments#ComplexWaveform{TData}}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An IEnumerator&lt;T&gt;  that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveform{TData}}#Remove(NationalInstruments.ComplexWaveform{`0})">
      <summary>
            This method is not supported.
            </summary>
      <param name="item">This parameter is not documented because the method is not supported.</param>
      <returns>The return value is not documented because the method is not supported.</returns>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveform{TData}}#Contains(NationalInstruments.ComplexWaveform{`0})">
      <summary>
            Determines whether the ICollection&lt;T&gt; contains a specific value.
            </summary>
      <param name="item">
            The object to locate in the ICollection&lt;T&gt;.
            </param>
      <returns>true if item is found in the ICollection&lt;T&gt;; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveform{TData}}#Clear">
      <summary>
            This method is not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveform{TData}}#Add(NationalInstruments.ComplexWaveform{`0})">
      <summary>
            This method is not supported.
            </summary>
      <param name="item">This parameter is not documented because the method is not supported.</param>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformCollection`1.Channels">
      <summary>
            Gets the number of channels in ComplexWaveformCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformCollection`1.Count">
      <summary>
            Gets the number of complex waveforms in ComplexWaveformCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformCollection`1.Records">
      <summary>
            Gets the number of records in ComplexWaveformCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformCollection`1.Item(System.Int32)">
      <summary>
            Gets the ComplexWaveform&lt;T&gt; at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the ComplexWaveform&lt;T&gt; to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformCollection`1.Item(System.Int32,System.Int32)">
      <summary>
            Gets the ComplexWaveform&lt;T&gt; at the specified indexes. 
            </summary>
      <param name="recordIndex">
            The zero-based record index of the ComplexWaveform&lt;T&gt; to locate in the collection.
            </param>
      <param name="channelIndex">
            The zero-based channel index of the ComplexWaveform&lt;T&gt; to locate in the collection.
            </param>
      <exception cref="T:System.IndexOutOfRangeException">recordIndex (parameter) or channelIndex (parameter) is less than zero.
            
            -or-
            

recordIndex (parameter) or channelIndex (parameter) is greater than or equal to Count.
            


            -or-
            recordIndex (parameter) or channelIndex (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveform{TData}}#IsReadOnly">
      <summary>
            Gets a value indicating whether the ICollection&lt;T&gt;  is read-only.
            </summary>
    </member>
    <member name="T:NationalInstruments.PrecisionWaveformTiming">
      <summary>
            Provides a class that encapsulates waveform timing information with a higher
            precision than WaveformTiming.
            </summary>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithNoInterval(NationalInstruments.PrecisionDateTime)">
      <summary>
            Creates a PrecisionWaveformTiming without an interval 
            with the specified time stamp.
            </summary>
      <param name="timeStamp">
            The PrecisionDateTime representing the start of an acquisition.
            </param>
      <returns>
            A PrecisionWaveformTiming instance with no interval.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithNoInterval(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Creates a PrecisionWaveformTiming without an interval 
            and with the specified time offset.
            </summary>
      <param name="timeOffset">
            The PrecisionTimeSpan representing the time difference between the
            start of an acquisition and the first sample.
            </param>
      <returns>
            A PrecisionWaveformTiming instance with no interval.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithNoInterval(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Creates a PrecisionWaveformTiming without an interval 
            with the specified time stamp and time offset.
            </summary>
      <param name="timeStamp">
            The PrecisionDateTime representing the start of an acquisition.
            </param>
      <param name="timeOffset">
            The PrecisionTimeSpan representing the time difference between the
            start of an acquisition and the first sample.
            </param>
      <returns>
            A PrecisionWaveformTiming instance with no interval.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The timeStamp (parameter) plus timeOffset (parameter) is greater than 
            MaxValue.
            
            -or-
            
            The timeStamp (parameter) plus timeOffset (parameter) is less than 
            MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithRegularInterval(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Creates a regular interval PrecisionWaveformTiming 
            with the specified sample interval.
            </summary>
      <param name="sampleInterval">
            The PrecisionTimeSpan between samples.
            </param>
      <returns>
            A regular interval PrecisionWaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithRegularInterval(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Creates a regular interval PrecisionWaveformTiming 
            with the specified sample interval and time offset.
            </summary>
      <param name="sampleInterval">
            The PrecisionTimeSpan between samples.
            </param>
      <param name="timeOffset">
            The PrecisionTimeSpan representing the time between the
            start of an acquisition and the first sample.
            </param>
      <returns>
            A regular interval PrecisionWaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithRegularInterval(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionDateTime)">
      <summary>
            Creates a regular interval PrecisionWaveformTiming 
            with the specified sample interval and time stamp.
            </summary>
      <param name="sampleInterval">
            The PrecisionTimeSpan between samples.
            </param>
      <param name="timeStamp">
            The PrecisionDateTime representing the start of an acquisition.
            </param>
      <returns>
            A regular interval PrecisionWaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithRegularInterval(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Creates a regular interval PrecisionWaveformTiming 
            with the specified sample interval, time stamp, and time offset.
            </summary>
      <param name="sampleInterval">
            The PrecisionTimeSpan between samples.
            </param>
      <param name="timeStamp">
            The PrecisionDateTime representing the start of an acquisition.
            </param>
      <param name="timeOffset">
            The PrecisionTimeSpan representing the time difference between the
            start of an acquisition and the first sample.
            </param>
      <returns>
            A regular interval PrecisionWaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            
            -or-
            
            The timeStamp (parameter) plus timeOffset (parameter) is greater than 
            MaxValue.
            
            -or-
            
            The timeStamp (parameter) plus timeOffset (parameter) is less than 
            MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithIrregularInterval(NationalInstruments.PrecisionDateTime[])">
      <summary>
            Creates a PrecisionWaveformTiming with an irregular interval.
            </summary>
      <param name="timeStamps">
            An array of PrecisionDateTime time stamp values
            that represents the irregular interval. The array needs to contain a time stamp for each point in the waveform that specifies the time that the point was acquired.
            </param>
      <returns>
            An irregular interval PrecisionWaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentNullException">timeStamps (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">timeStamps (parameter) are not in ascending order.
            </exception>
    </member>
    <member name="F:NationalInstruments.PrecisionWaveformTiming.Empty">
      <summary>
            Represents a PrecisionWaveformTiming that has no 
            time stamp, time offset, or sample interval.
            </summary>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.GetTimeStamps(System.Int32)">
      <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A PrecisionDateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular and
            HasTimeStamp is false.
            	
            - or -
            
            The SampleIntervalMode is 
            Regular,
            and the generated time stamp values are greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">
            The SampleIntervalMode is 
            Irregular,
            and count (parameter) is greater than the number of irregular time stamps.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.GetTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A PrecisionDateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	
            - or -
            
            The SampleIntervalMode is 
            Regular,
            and the generated time stamp values are greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            
            The SampleIntervalMode is Irregular,
            and sampleIndex (parameter) plus count (parameter) is greater than the number of irregular time stamps.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.GetTimeStamps(System.Int32,System.Int32,NationalInstruments.PrecisionDateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The PrecisionDateTime buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	
            - or -
            
            The SampleIntervalMode is 
            Regular,
            and the generated time stamp values are greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            
            The SampleIntervalMode is 
            Irregular,
            and sampleIndex (parameter) plus count (parameter) is greater than the number of irregular time stamps.
            
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.FromWaveformTiming(NationalInstruments.WaveformTiming)">
      <summary>
            Converts a WaveformTiming object to a
            PrecisionWaveformTiming.
            </summary>
      <param name="timing">
            The WaveformTiming object that initialized the
            PrecisionWaveformTiming.
            </param>
      <returns>
            A new PrecisionWaveformTiming object that represents
            the same waveform timing information as timing (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.ToWaveformTiming">
      <summary>
            Converts the current PrecisionWaveformTiming to a
            WaveformTiming object.
            </summary>
      <returns>
            A WaveformTiming object which represents the
            same timing information as the current
            PrecisionWaveformTiming instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.Equals(System.Object)">
      <summary>
            Returns a value that indicates if this object is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this object.
            </param>
      <returns>true if obj (parameter) is a
            PrecisionWaveformTiming that represents the same value as this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionWaveformTiming.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp">
      <summary>
            Gets a value indicating whether the PrecisionWaveformTiming has a time stamp.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp">
      <summary>
            Gets the time stamp of the waveform.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.PrecisionWaveformTiming.StartTime">
      <summary>
            Gets the time that the first sample in the waveform was acquired.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset">
      <summary>
            Gets the difference between the StartTime and the TimeStamp of the waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode">
      <summary>
            Gets the sample interval mode that determines how the waveform is sampled.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionWaveformTiming.SampleInterval">
      <summary>
            Gets the time interval between samples.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is not 
            Regular.
            </exception>
    </member>
    <member name="T:NationalInstruments.AnalogWaveformSample">
      <summary>
            Represents a sample of an analog waveform.
            </summary>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSample.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample.Owner">
      <summary>
            Gets the AnalogWaveform that the sample came from.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample.Value">
      <summary>
            Gets and sets the value of the analog sample.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample.HasTimeStamp">
      <summary>
            Gets a value indicating if the analog sample has a time stamp.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample.TimeStamp">
      <summary>
            Gets the time at which the data was sampled.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="T:NationalInstruments.WaveformSampleIntervalMode">
      <summary>
            Specifies the sample interval mode that determines how the waveform is sampled.
            </summary>
    </member>
    <member name="F:NationalInstruments.WaveformSampleIntervalMode.None">
      <summary>
            No sample interval.
            </summary>
    </member>
    <member name="F:NationalInstruments.WaveformSampleIntervalMode.Regular">
      <summary>
            The sample interval is regular.
            </summary>
    </member>
    <member name="F:NationalInstruments.WaveformSampleIntervalMode.Irregular">
      <summary>
            The sample interval is irregular.
            </summary>
    </member>
    <member name="T:NationalInstruments.EngineeringFormatInfo">
      <summary>
            Defines a custom formatter to format numeric values with engineering notation and International
            System of Units (SI) prefixes and symbols.
            </summary>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.#ctor">
      <summary>
            Initializes a new instance of the EngineeringFormatInfo class.
            </summary>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>
            Gets EngineeringFormatInfo associated with the specified
            IFormatProvider.
            </summary>
      <param name="provider">
            The IFormatProvider used to get EngineeringFormatInfo.
            </param>
      <returns>
            The EngineeringFormatInfo associated with the specified
            IFormatProvider.
            </returns>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.ReadOnly(NationalInstruments.EngineeringFormatInfo)">
      <summary>
            Returns a read-only copy of the specified EngineeringFormatInfo.
            </summary>
      <param name="efi">
            The EngineeringFormatInfo from which to create a read-only copy.
            </param>
      <returns>
            Attempting to perform an assignment to a property of a read-only
            EngineeringFormatInfo causes an
            InvalidOperationException.
            </returns>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.GetFormat(System.Type)">
      <summary>
            Gets an object of the specified type that provides a numeric formatting service.
            </summary>
      <param name="formatType">
            The Type of the required formatting service.
            </param>
      <returns>
            The current EngineeringFormatInfo, if formatType (parameter)
            is the same as the type of the current EngineeringFormatInfo;
            otherwise, null.
            </returns>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.Clone">
      <summary>
            Creates a copy of EngineeringFormatInfo.
            </summary>
      <returns>
            A new EngineeringFormatInfo copied from the original
            EngineeringFormatInfo.
            </returns>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.TryParse(System.String,System.String,System.IFormatProvider,System.Double@)">
      <summary>
            Converts the engineering string representation of a number to its double-precision floating-point number equivalent
            based on the format specified.
            </summary>
      <param name="format">
            A format string containing formatting specifications.
            </param>
      <param name="s">
            The formatted string to parse.
            </param>
      <param name="formatProvider">
            An IFormatProvider object that supplies format information about the
            current instance.
            </param>
      <param name="value">
            Upon return, contains the parsed value.
            </param>
      <returns>true if the string is parsed successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.Parse(System.String,System.String)">
      <summary>
            Converts the engineering string representation of a number to its double-precision floating-point number equivalent
            based on the format specified.
            </summary>
      <param name="format">
            A format string containing formatting specifications.
            </param>
      <param name="s">
            The formatted string to parse.
            </param>
      <returns>
            The parsed value.
            </returns>
      <exception cref="T:System.ArgumentNullException">format (parameter) is null.-or-s (parameter) is null</exception>
      <exception cref="T:System.FormatException">format (parameter) is not a valid engineering format.-or-The format of s (parameter) does not match the format specified by format (parameter).</exception>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.Parse(System.String,System.String,System.IFormatProvider)">
      <summary>
            Converts the engineering string representation of a number to its double-precision floating-point number equivalent
            based on the specified format and format provider.
            </summary>
      <param name="format">
            A format string containing formatting specifications.
            </param>
      <param name="s">
            The formatted string to parse.
            </param>
      <param name="formatProvider">
            An IFormatProvider object that supplies format information about the
            current instance.
            </param>
      <returns>
            The parsed value.
            </returns>
      <exception cref="T:System.ArgumentNullException">format (parameter) is null.-or-s (parameter) is null</exception>
      <exception cref="T:System.FormatException">format (parameter) is not a valid engineering format.-or-The format of s (parameter) does not match the format specified by format (parameter).</exception>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>
            Converts the value of a specified object to an equivalent string representation using
            specified formatting information.
            </summary>
      <param name="format">
            A format string containing formatting specifications.
            </param>
      <param name="arg">
            An object to format.
            </param>
      <param name="formatProvider">
            An IFormatProvider object that supplies format information about the
            current instance.
            </param>
      <returns>
            The string representation of the value of arg (parameter), formatted as specified
            by format (parameter) and formatProvider (parameter).
            </returns>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.IsReadOnly">
      <summary>
            Gets a value that indicates if EngineeringFormatInfo
            is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.YottaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^24.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.YottaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^24.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ZettaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^21.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ZettaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^21.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ExaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^18.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ExaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^18.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.PetaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^15.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.PetaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^15.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.TeraPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^12.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.TeraSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^12.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.GigaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^9.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.GigaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^9.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MegaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^6.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MegaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^6.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.KiloPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^3.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.KiloSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^3.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MilliPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-3.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MilliSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-3.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MicroPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-6.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MicroSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-6.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.NanoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-9.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.NanoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-9.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.PicoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-12.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.PicoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-12.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.FemtoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-15.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.FemtoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-15.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.AttoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-18.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.AttoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-18.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ZeptoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-21.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ZeptoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-21.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.YoctoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-24.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.YoctoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-24.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.Default">
      <summary>
            Gets a read-only EngineeringFormatInfo whose properties are
            set to the default values.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformSignalCollection">
      <summary>
            Represents a strongly typed collection of DigitalWaveformSignal objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignalCollection.IndexOf(NationalInstruments.DigitalWaveformSignal)">
      <summary>
            Searches for the DigitalWaveformSignal and returns the zero-based index of the first
            occurrence.
            </summary>
      <param name="signal">
            The DigitalWaveformSignal to locate.
            </param>
      <returns>
            The zero-based index of the first occurrence of signal (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignalCollection.CopyTo(NationalInstruments.DigitalWaveformSignal[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignalCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignalCollection.Item(System.Int32)">
      <summary>
            Gets the DigitalWaveformSignal at the specified index.
            </summary>
      <param name="signalIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">signalIndex (parameter) is less than zero.
            
            -or-
            

signalIndex (parameter) is greater than or equal to count.
            


            -or-
            signalIndex (parameter) is greater than or equal to count.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignalCollection.Item(System.String)">
      <summary>
            Gets the DigitalWaveformSignal with the specified signal name.
            </summary>
      <param name="signalName">
            The signal name of the DigitalWaveformSignal.
            </param>
      <exception cref="T:System.ArgumentException">signalName (parameter) was not found.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignalCollection.Count">
      <summary>
            Gets the number of samples in the DigitalWaveformSignalCollection.
            </summary>
    </member>
    <member name="T:NationalInstruments.EnumObject">
      <summary>
            Provides the base class for enumeration-like objects that are based on extensible types.
            </summary>
    </member>
    <member name="M:NationalInstruments.EnumObject.#ctor">
      <summary>
            Initializes a new instance of the EnumObject class.
            </summary>
    </member>
    <member name="M:NationalInstruments.EnumObject.ToString">
      <summary>
            Returns a String representation of the object.
            </summary>
      <returns>
            A String representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.EnumObject.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="obj">
            An object to compare, or null.
            </param>
      <returns>
            A signed number indicating the relative values of this instance and obj (parameter).
            

Return ValueDescriptionLess than zeroThis instance is less than obj (parameter).ZeroThis instance is equal to obj (parameter).Greater than zeroThis instance is greater than obj (parameter)

-or-

obj (parameter) is null.

</returns>
      <exception cref="T:System.ArgumentException">obj (parameter) is not an EnumObject.
            </exception>
    </member>
    <member name="M:NationalInstruments.EnumObject.CompareParameters(NationalInstruments.EnumObject)">
      <summary>
            Compares the parameters on this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="other">The object to compare.</param>
    </member>
    <member name="M:NationalInstruments.EnumObject.Equals(System.Object)" />
    <member name="M:NationalInstruments.EnumObject.GetHashCode" />
    <member name="M:NationalInstruments.EnumObject.GetNames(System.Type)">
      <summary>
            Gets an array of the names of the values in a specified EnumObject.
            </summary>
      <param name="type">
            An EnumObject type.
            </param>
      <returns>
            A string array of the names of the default values that are provided by the
            EnumObject.
            </returns>
      <exception cref="T:System.ArgumentException">type (parameter) is not an EnumObject.
            </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.EnumObject.GetValues(System.Type)">
      <summary>
            Gets an array of the values in a specified EnumObject.
            </summary>
      <param name="type">
            An EnumObject type.
            </param>
      <returns>
            A Array of the default values that are provided by the
            EnumObject.
            </returns>
      <exception cref="T:System.ArgumentException">type (parameter) is not an EnumObject.
            </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.EnumObject.Parse(System.Type,System.String)">
      <summary>
            Converts the string representation of the name to an equivalent EnumObject instance.
            </summary>
      <param name="type">
            The Type of the EnumObject.
            </param>
      <param name="value">
            A string that contains the name to convert.
            </param>
      <returns>
            An object which has a type that is specified by type (parameter) and has a value that is represented
            by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentException">type (parameter) is not an EnumObject.
                -or-value (parameter) is not one of the default values that is defined by the
                    EnumObject.
                </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.EnumObject.Parse(System.Type,System.String,System.Boolean)">
      <summary>
            Converts the string representation of the name to an equivalent EnumObject instance.
            You can specify if the operation is case-sensitive.
            </summary>
      <param name="type">
            The Type of the EnumObject.
            </param>
      <param name="value">
            A string that contains the name to convert.
            </param>
      <param name="ignoreCase">
            Ignores case sensitivity if true.
            </param>
      <returns>
            An object which has a type that is specified by type (parameter) and has a value that is represented
            by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentException">type (parameter) is not an EnumObject.
                -or-value (parameter) is not one of the default values that is defined by the
                    EnumObject.
                </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.EnumObject.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.EnumObject.Name">
      <summary>
            Gets the name of an EnumObject value.
            </summary>
    </member>
    <member name="T:NationalInstruments.ComponentBase">
      <summary>
            Provides a base implementation of the IComponent interface for
            Measurement Studio components.
            </summary>
    </member>
    <member name="T:NationalInstruments.ISupportSynchronizationContext">
      <summary>
            Specifies that an object can use SynchronizationContext to
            customize how events and callback delegates are invoked.
            </summary>
    </member>
    <member name="P:NationalInstruments.ISupportSynchronizationContext.SynchronizeCallbacks">
      <summary>
            Specifies how events and callback delegates are invoked.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComponentBase.#ctor">
      <summary>
            Initializes a new instance of the ComponentBase class.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComponentBase.OnSynchronizingObjectChanged(System.EventArgs)">
      <summary>
            Raises the SynchronizingObjectChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.GetService(System.Type)">
      <summary>
            Returns an object that represents a service provided by the component or by its container.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents a service provided by the component.  This value is
            null if the component does not provide the specified service.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComponentBase.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the ComponentBase.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If
            false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseExceptionIfDisposed">
      <summary>
            This member is obsolete. Use the ThrowExceptionIfDisposed 
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComponentBase.ThrowExceptionIfDisposed">
      <summary>
            Throws an ObjectDisposedException if the component has been disposed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The component has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.AddEventHandler(System.Object,System.Delegate)">
      <summary>
            Adds an event handler for the specified event key.
            </summary>
      <param name="eventKey">
            The key of the event in the Events
            event handler list.
            </param>
      <param name="handler">
            The delegate to the method that handles the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>
            Removes an event handler for the specified event key.
            </summary>
      <param name="eventKey">
            The key of the event in the Events
            event handler list.
            </param>
      <param name="handler">
            The delegate to the method that handles the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseEvent(System.Object,System.EventArgs)">
      <summary>
            Raises the event specified by an event key with the specified event arguments.
            </summary>
      <param name="eventKey">
            The key of the event in the Events event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseEventDirect(System.Object,System.EventArgs)">
      <summary>
            Raises the event specified by an event key with the specified event arguments without
            cross-thread synchronization.
            </summary>
      <param name="eventKey">
            The key of the event in the Events event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseEventAsync(System.Object,System.EventArgs)">
      <summary>
            Asynchronously raises the event specified by an event key with the specified event arguments.
            </summary>
      <param name="eventKey">
            The key of the event in the Events
            event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseGenericEventDirect``1(System.Object,``0)">
      <summary>
            Raises the event specified by an event key with the specified event arguments without
            cross-thread synchronization.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseGenericEvent``1(System.Object,``0)">
      <summary>
            Raises the event specified by an event key with the specified event arguments.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="eventKey">
            The key of the event in the Events
            event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseGenericEvent``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)">
      <summary>
            Raises the event through a synchronization context with the specified event arguments.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="operation">
            An AsyncOperation that provides the
            SynchronizationContext that is used to invoke
            the event.
            </param>
      <param name="callback">
            A delegate to the method that raises the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseGenericEventAsync``1(System.Object,``0)">
      <summary>
            Asynchronously raises the event specified by an event key with the specified event arguments.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="eventKey">
            The key of the event in the Events
            event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseGenericEventAsync``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)">
      <summary>
            Asynchronously raises the event through a synchronization context with the specified event
            arguments.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="operation">
            An AsyncOperation that provides the
            SynchronizationContext that is used to invoke
            the event.
            </param>
      <param name="callback">
            A delegate to the method that raises the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComponentBase.IsDisposed">
      <summary>
            Gets a value indicating if the component has been disposed.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComponentBase.SynchronizeCallbacks">
      <summary>
            Gets or sets how events and callback delegates are invoked.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComponentBase.SynchronizingObject">
      <summary>
            Gets or sets the object that marshals event-handler and callback calls.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComponentBase.Tag">
      <summary>
            Gets or sets the object that contains data about the component.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.ComponentBase.SynchronizingObjectChanged">
      <summary>
            Occurs when SynchronizingObject has changed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.AccessibleAfterDisposeAttribute">
      <summary>
            Indicates that a method can be called after an object has been disposed.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformSampleCollection">
      <summary>
            Represents a strongly typed collection of DigitalWaveformSample objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSampleCollection.IndexOf(NationalInstruments.DigitalWaveformSample)">
      <summary>
            Searches for the DigitalWaveformSample and returns the zero-based index of the first
            occurrence.
            </summary>
      <param name="sample">
            The DigitalWaveformSample to locate.
            </param>
      <returns>
            The zero-based index of the first occurrence of sample (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSampleCollection.CopyTo(NationalInstruments.DigitalWaveformSample[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSampleCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSampleCollection.Item(System.Int32)">
      <summary>
            Gets the DigitalWaveformSample at the specified index. 
            </summary>
      <param name="sampleIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            

sampleIndex (parameter) is greater than or equal to count.
            


            -or-
            sampleIndex (parameter) is greater than or equal to count.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSampleCollection.Count">
      <summary>
            Gets the number of samples in DigitalWaveformSampleCollection.
            </summary>
    </member>
    <member name="T:NationalInstruments.ComplexWaveformSampleCollection`1">
      <summary>
            Represents a strongly typed collection of ComplexWaveformSample&lt;T&gt; objects.
            </summary>
      <typeparam name="TData">
            The type of the sample collection.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.CopyTo(NationalInstruments.ComplexWaveformSample{`0}[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#CopyTo(NationalInstruments.ComplexWaveformSample{`0}[],System.Int32)">
      <summary>
            Copies the elements of the ICollection&lt;T&gt; to an array, starting at a particular array index.
             
            </summary>
      <param name="array">
            The one-dimensional array that is the destination of the elements copied from ICollection&lt;T&gt;.
            The array must have zero-based indexing.
            </param>
      <param name="index">
            The zero-based index in array (parameter) at which copying begins.
            </param>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.IndexOf(NationalInstruments.ComplexWaveformSample{`0})">
      <summary>
            Searches for the ComplexWaveformSample&lt;T&gt; and returns the zero-based index of the first
            occurrence.
            </summary>
      <param name="sample">
            The ComplexWaveformSample&lt;T&gt; to locate.
            </param>
      <returns>
            The zero-based index of the first occurrence of sample (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#Contains(NationalInstruments.ComplexWaveformSample{`0})">
      <summary>
            Determines whether the ICollection&lt;T&gt; contains a specific value.
            </summary>
      <param name="item">
            The object to locate in the ICollection&lt;T&gt;.
            </param>
      <returns>true if item is found in the ICollection&lt;T&gt;; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#Remove(NationalInstruments.ComplexWaveformSample{`0})">
      <summary>
            This method is not supported.
            </summary>
      <param name="item">This parameter is not documented because the method is not supported.</param>
      <returns>The return value is not documented because the method is not supported.</returns>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#Clear">
      <summary>
            This method is not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#Add(NationalInstruments.ComplexWaveformSample{`0})">
      <summary>
            This method is not supported.
            </summary>
      <param name="item">This parameter is not documented because the method is not supported.</param>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#IEnumerable{NationalInstruments#ComplexWaveformSample{TData}}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An IEnumerator&lt;T&gt;  that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformSampleCollection`1.Item(System.Int32)">
      <summary>
            Gets the ComplexWaveformSample&lt;T&gt; at the specified index. 
            </summary>
      <param name="sampleIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            

sampleIndex (parameter) is greater than or equal to count.
            


            -or-
            sampleIndex (parameter) is greater than or equal to count.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformSampleCollection`1.Count">
      <summary>
            Gets the number of samples in ComplexWaveformSampleCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#IsReadOnly">
      <summary>
            Gets a value indicating whether the ICollection&lt;T&gt;  is read-only.
            </summary>
    </member>
    <member name="T:NationalInstruments.ComplexWaveformSample`1">
      <summary>
            Represents a sample of a complex waveform.
            </summary>
      <typeparam name="TData">
            The type of the sample.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.ComplexWaveformSample`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformSample`1.Owner">
      <summary>
            Gets the ComplexWaveform&lt;T&gt; that the sample came from.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformSample`1.Value">
      <summary>
            Gets or sets the value of the ComplexWaveformSample&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformSample`1.HasTimeStamp">
      <summary>
            Gets a value indicating if the complex sample has a time stamp.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformSample`1.PrecisionTimeStamp">
      <summary>
            Gets the time at which the data was sampled.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComplexWaveformSample`1.Index">
      <summary>
            Gets the index of the sample in the ComplexWaveformSampleCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformFailure">
      <summary>
            Provides a class that encapsulates a test failure between two digital states.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformFailure.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the DigitalWaveformFailure with the specified info and 
            context.
            </summary>
      <param name="info">
            The data needed to serialize or deserialize an object.
            </param>
      <param name="context">
            The source and destination of a given serialized stream.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformFailure.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Returns the data needed to serialize the DigitalWaveformFailure.
            </summary>
      <param name="info">
            A SerializationInfo object containing the information required to serialize the
            DigitalWaveformFailure.
            </param>
      <param name="context">
            A StreamingContext object.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformFailure.SampleIndex">
      <summary>
            Gets the sample index into the compared test waveform where the test failure occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformFailure.ExpectedSampleIndex">
      <summary>
            Gets the sample index into the expected test waveform where the test failure occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformFailure.SignalIndex">
      <summary>
            Gets the signal index into the compared test waveform and the expected test waveform where the test failure occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformFailure.ActualState">
      <summary>
            Gets the state from the compared waveform where the test failure occurred.</summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformFailure.ExpectedState">
      <summary>
            Gets the state from the expected waveform where the test failure occurred.</summary>
    </member>
    <member name="T:NationalInstruments.ComplexWaveform`1">
      <summary>
            Provides a data type that encapsulates raw complex data, scaling information, and timing information.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. TData (generic type parameter) supports the ComplexDouble and
            ComplexInt16 data types. 
            			</typeparam>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of ComplexWaveform&lt;T&gt; with the specified sample
            count.
            </summary>
      <param name="sampleCount">
            The number of samples in ComplexWaveform&lt;T&gt;.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of ComplexWaveform&lt;T&gt; with the specified sample
            count and capacity.
            </summary>
      <param name="sampleCount">
            The number of samples in ComplexWaveform&lt;T&gt;.
            </param>
      <param name="capacity">
            The total capacity of the ComplexWaveform&lt;T&gt;.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            - or -capacity (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">capacity (parameter) is less than sampleCount (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.FromArray1D(`0[])">
      <summary>
            Creates a ComplexWaveform&lt;T&gt; from an array of values.
            </summary>
      <param name="array">
            The array of values.
            </param>
      <returns>
            A ComplexWaveform&lt;T&gt;.
            </returns>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.FromArray2D(`0[0:,0:])">
      <summary>
            Creates a ComplexWaveform&lt;T&gt; array from a two-dimensional array of values.
            </summary>
      <param name="array">
            The two-dimensional array of values.
            </param>
      <returns>
            A ComplexWaveform&lt;T&gt; array.
            </returns>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.CopySamples(NationalInstruments.ComplexWaveform{`0},NationalInstruments.ComplexWaveform{`0},System.Int32)">
      <summary>
            Copies the data of a source complex waveform to a destination complex waveform.
            </summary>
      <param name="sourceWaveform">
            The source ComplexWaveform&lt;T&gt;.
            </param>
      <param name="destinationWaveform">
            The destination ComplexWaveform&lt;T&gt;.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">sourceWaveform (parameter) is null.
            
            -or-
            destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is greater than the 
            sourceWaveform (parameter) sample count.
            
            -or-
            sampleCount (parameter) is greater than the 
            destinationWaveform (parameter) sample count.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.CopySamples(NationalInstruments.ComplexWaveform{`0},System.Int32,NationalInstruments.ComplexWaveform{`0},System.Int32,System.Int32)">
      <summary>
            Copies the data of a source complex waveform to a destination complex waveform with the specified indexes.
            </summary>
      <param name="sourceWaveform">
            The source ComplexWaveform&lt;T&gt;.
            </param>
      <param name="sourceSampleIndex">
            The source sample index.
            </param>
      <param name="destinationWaveform">
            The destination ComplexWaveform&lt;T&gt;.
            </param>
      <param name="destinationSampleIndex">
            The destination sample index.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">sourceWaveform (parameter) is null.
            
            -or-
            destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sourceSampleIndex (parameter) is less than zero.
            
            -or-
            destinationSampleIndex (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is less than zero.
            
            -or-
            sourceSampleIndex (parameter) plus sampleCount (parameter) is greater than the 
            sourceWaveform (parameter) sample count.
            
            -or-
            destinationSampleIndex (parameter) plus sampleCount (parameter) is greater than the 
            destinationWaveform (parameter) sample count.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetRawData">
      <summary>
            Returns the raw complex waveform data.
            </summary>
      <returns>
            The raw complex waveform data.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetRawData(System.Int32,System.Int32)">
      <summary>
            Returns the raw complex waveform data using the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to return.
            </param>
      <returns>
            The raw complex waveform data.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetRawData(System.Int32,System.Int32,`0[],System.Int32)">
      <summary>
            Returns the raw complex waveform data using the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the raw data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the raw data into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetScaledData">
      <summary>
            Returns the scaled complex waveform data.
            </summary>
      <returns>
            The scaled complex waveform data.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetScaledData(System.Int32,System.Int32)">
      <summary>
            Returns the scaled complex waveform data using the sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to return.
            </param>
      <returns>
            The scaled complex waveform data.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetScaledData(System.Int32,System.Int32,NationalInstruments.ComplexDouble[],System.Int32)">
      <summary>
            Returns the scaled complex waveform data using the sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the scaled data into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetPrecisionTimeStamps">
      <summary>
            Retrieves the time stamps from PrecisionTiming.
            </summary>
      <returns>
            A PrecisionDateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	</exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetPrecisionTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps from PrecisionTiming using 
            the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A PrecisionDateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetPrecisionTimeStamps(System.Int32,System.Int32,NationalInstruments.PrecisionDateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps from PrecisionTiming using 
            the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.Append(`0[])">
      <summary>
            Appends data to the complex waveform.
            </summary>
      <param name="data">
            The data to append to the complex waveform.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode property of
            PrecisionTiming is
            Irregular.
            </exception>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.Append(`0[],NationalInstruments.PrecisionDateTime[])">
      <summary>
            Appends data and precision time stamps to the complex waveform.
            </summary>
      <param name="data">
            The data to append to the complex waveform.
            </param>
      <param name="timeStamps">
            The precision time stamps to append to the timing of the complex waveform.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode property of
            PrecisionTiming is
            Regular or
            None.
            </exception>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            - or -timeStamps (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The length of data (parameter) is not equal to the length of timeStamps (parameter).
            - or -timeStamps (parameter) are not in ascending order after the time stamps in
            PrecisionTiming.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.Append(NationalInstruments.ComplexWaveform{`0})">
      <summary>
            Appends complex waveform data and time stamps to the current complex waveform.
            </summary>
      <param name="waveform">
            The ComplexWaveform&lt;T&gt; to append to
            the current complex waveform.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode property of
            PrecisionTiming is
            Irregular and the 
            SampleIntervalMode property of the
            PrecisionTiming property of
            waveform (parameter) is
            Regular or
            None.
            - or -
            The SampleIntervalMode property of
            PrecisionTiming is
            Regular or
            None and the 
            SampleIntervalMode property of the
            PrecisionTiming property of
            waveform (parameter) is
            Irregular.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The time stamps in waveform (parameter) are not in ascending order after the time stamps
            in PrecisionTiming.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.Append(NationalInstruments.ComplexWaveform{`0}[])">
      <summary>
            Appends complex waveform data and time stamps from an array of waveforms to the current complex waveform.
            </summary>
      <param name="waveforms">
            An array of ComplexWaveform&lt;T&gt; objects to append to
            the current complex waveform.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode property of
            PrecisionTiming is
            Irregular and the 
            SampleIntervalMode property of the
            PrecisionTiming property of
            an element in waveforms (parameter) is
            Regular or
            None.
            - or -
            The SampleIntervalMode property of
            PrecisionTiming is
            Regular or
            None and the 
            SampleIntervalMode property of the
            PrecisionTiming property of
            an element in waveforms (parameter) is
            Irregular.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            - or -
            An element in waveforms (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The time stamps in the complex waveforms in waveforms (parameter) are not in ascending order after the time stamps
            in PrecisionTiming.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetRealDataArray(System.Boolean)">
      <summary>
            Returns an array that contains the real parts of the complex waveform samples.
            </summary>
      <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the real data.
            </param>
      <returns>
            An array that contains the real parts of the complex samples.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetRealDataWaveform(System.Boolean)">
      <summary>
            Returns an AnalogWaveform&lt;T&gt; of type Double that contains the real 
            parts of the complex waveform samples.
            </summary>
      <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the real data.
            </param>
      <returns>
            An AnalogWaveform&lt;T&gt; of type Double that contains the 
            real parts of the complex samples.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetImaginaryDataArray(System.Boolean)">
      <summary>
            Returns an array that contains the imaginary parts of the complex waveform samples.
            </summary>
      <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the imaginary data.
            </param>
      <returns>
            An array that contains the imaginary parts of the complex samples.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetImaginaryDataWaveform(System.Boolean)">
      <summary>
            Returns an AnalogWaveform&lt;T&gt; of type Double that contains the imaginary 
            parts of the complex waveform samples.
            </summary>
      <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the imaginary data.
            </param>
      <returns>
            An AnalogWaveform&lt;T&gt; of type Double that contains the 
            imaginary parts of the complex samples.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetMagnitudeDataArray(System.Boolean)">
      <summary>
            Returns an array that contains the magnitudes of the complex waveform samples.
            </summary>
      <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the magnitude.
            </param>
      <returns>
            An array that contains the magnitudes of the complex samples.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetMagnitudeDataWaveform(System.Boolean)">
      <summary>
            Returns an AnalogWaveform&lt;T&gt; of type Double that contains the magnitude
            data of the complex waveform samples.
            </summary>
      <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the magnitude data.
            </param>
      <returns>
            An AnalogWaveform&lt;T&gt; of type Double that has the 
            magnitude data of the complex samples.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetPhaseDataArray(System.Boolean)">
      <summary>
            Returns an array that contains the phases of the complex waveform samples.
            </summary>
      <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the phase.
            </param>
      <returns>
            An array that contains the phases of the complex samples.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexWaveform`1.GetPhaseDataWaveform(System.Boolean)">
      <summary>
            Returns an AnalogWaveform&lt;T&gt; of type Double that contains the phases
            of the complex waveform samples.
            </summary>
      <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the phases.
            </param>
      <returns>
            An AnalogWaveform&lt;T&gt; of type Double that contains the 
            phases of the complex samples.
            </returns>
    </member>
    <member name="P:NationalInstruments.ComplexWaveform`1.Samples">
      <summary>
            Gets the samples of the complex waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveform`1.SampleCount">
      <summary>
            Gets the number of samples in ComplexWaveform&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveform`1.ScaleMode">
      <summary>
            Gets or sets the scale mode of the complex waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveform`1.DataType">
      <summary>
            Gets the data type of the complex waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveform`1.ChannelName">
      <summary>
            Gets or sets the name of the device channel from which the complex waveform is acquired.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveform`1.UnitDescription">
      <summary>
            Gets or sets the unit of measurement, such as volts, of the complex waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming">
      <summary>
            Gets or sets the timing information of the complex waveform.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            	The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">SampleIntervalMode is
            Irregular and the number of time stamps in 
            PrecisionTiming is not equal to
            Count.
            
            -or-
            
            The time stamp values are greater than MaxValue.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties">
      <summary>
            Gets the extended properties for the complex waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexWaveform`1.Capacity">
      <summary>
            Gets or sets the total capacity available for ComplexWaveform&lt;T&gt; data.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than SampleCount.
            </exception>
    </member>
    <member name="T:NationalInstruments.ComplexDouble">
      <summary>
            Represents a complex number of type Double that is composed of a real part and an imaginary part.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the ComplexDouble class with the specified real and imaginary values.
            </summary>
      <param name="real">
            The real part of the complex number.
            </param>
      <param name="imaginary">
            The imaginary part of the complex number.
            </param>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.FromDouble(System.Double)">
      <summary>
            Creates a ComplexDouble from a double real value.
            </summary>
      <param name="real">
            The real part of the complex number.
            </param>
      <returns>
            A ComplexDouble with the real part specified by real (parameter)
            and a 0 imaginary part.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.FromPolar(System.Double,System.Double)">
      <summary>
            Returns a ComplexDouble that represents a complex
            value with the specified magnitude and phase.
            </summary>
      <param name="magnitude">
            The magnitude of the complex quantity.
            </param>
      <param name="phase">
            The phase, in radians, of the complex quantity.
            </param>
      <returns>
            A ComplexDouble that represents a complex value
            with a magnitude of magnitude (parameter) and a phase of 
            phase (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Plus">
      <summary>
            Returns this instance of the ComplexDouble (unary plus).
            </summary>
      <returns>
            This instance of the ComplexDouble.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_UnaryPlus(NationalInstruments.ComplexDouble)">
      <summary>
            Returns the specified instance of the ComplexDouble (unary plus).
            </summary>
      <param name="c">
            A ComplexDouble.
            </param>
      <returns>
            The specified instance of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Negate">
      <summary>
            Returns a ComplexDouble with a value that is 
            the negated value of this object (unary minus).
            </summary>
      <returns>
            A ComplexDouble with a value that is the negated value 
            of this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_UnaryNegation(NationalInstruments.ComplexDouble)">
      <summary>
            Returns a ComplexDouble with a value that is the negative of the specified 
            object (unary minus).
            </summary>
      <param name="c">
            A ComplexDouble.
            </param>
      <returns>
            A ComplexDouble with a value that is the negative of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Add(NationalInstruments.ComplexDouble)">
      <summary>
            Adds the value of the specified ComplexDouble to this object and returns a 
            new ComplexDouble that represents the sum.
            </summary>
      <param name="c">
            The ComplexDouble to add to this object.
            </param>
      <returns>
            A ComplexDouble that represents the value of this 
            object plus the value of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Addition(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Adds the values of two ComplexDouble objects.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>
            A ComplexDouble with a value that is the sum of 
            c1 (parameter) and c2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Subtract(NationalInstruments.ComplexDouble)">
      <summary>
            Subtracts the value of a ComplexDouble from this object and 
            returns a new ComplexDouble that represents the difference.
            </summary>
      <param name="c">
            The ComplexDouble to subtract from this object.
            </param>
      <returns>
            A ComplexDouble that represents the value of this
            object minus the value of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Subtraction(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Subtracts the value of one ComplexDouble from the value of another ComplexDouble.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>
            A ComplexDouble with a value that is the result of 
            c1 (parameter) minus c2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Multiply(NationalInstruments.ComplexDouble)">
      <summary>
            Multiplies a ComplexDouble with this object and 
            returns a new ComplexDouble that represents the product.
            </summary>
      <param name="c">
            The ComplexDouble to multiply with this object.
            </param>
      <returns>
            A ComplexDouble that represents the value of this
            object times the value of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Multiply(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Multiplies the values of two ComplexDouble objects.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>
            A ComplexDouble with a value that is the product of 
            c1 (parameter) and c2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Divide(NationalInstruments.ComplexDouble)">
      <summary>
            Divides this object by a ComplexDouble and returns
            a new ComplexDouble that represents the result.
            </summary>
      <param name="c">
            The ComplexDouble by which to divide this object.
            </param>
      <returns>
            A ComplexDouble that represents the value of this
            object divided by the value of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Division(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Divides the value of a ComplexDouble by the value of another ComplexDouble.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>
            A ComplexDouble with a value that is equal to 
            c1 (parameter) divided by c2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Explicit(System.Double)~NationalInstruments.ComplexDouble">
      <summary>
            Creates a ComplexDouble from a double real value.
            </summary>
      <param name="real">
            The real part of the complex number.
            </param>
      <returns>
            A ComplexDouble with the real part specified by real (parameter)
            and a 0 imaginary part.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Equality(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Returns a Boolean that indicates if two ComplexDouble objects are 
            equal.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>true if the values of c1 (parameter) and c2 (parameter)
            are equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Inequality(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Returns a Boolean that indicates if two ComplexDouble objects are 
            not equal.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>true if the values of c1 (parameter) and c2 (parameter)
            are not equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Equals(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Returns a Boolean value that indicates if two specified ComplexDouble objects are equal.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>true if c1 (parameter) and c2 (parameter) are equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Equals(System.Object)">
      <summary>
            Returns a Boolean value that indicates if this object is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this object.
            </param>
      <returns>true if obj (parameter) is a
            ComplexDouble that represents the same value as this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Equals(NationalInstruments.ComplexDouble)">
      <summary>
            Returns a Boolean value that indicates if this object is equal to the specified 
            ComplexDouble.
            </summary>
      <param name="c">
            A ComplexDouble to compare with this object.
            </param>
      <returns>true if c (parameter) represents the same value  
            as this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns the String representation of the value of this object using the specified format and culture-specific 
            formatting information.
            </summary>
      <param name="format">
            	The String that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for Double and is applied to the real and imaginary
            parts of the complex number. If format (parameter) is null,  the return value uses the default format.</param>
      <param name="formatProvider">
            The IFormatProvider to use to format the value.  This IFormatProvider is
            applied to the real and imaginary parts of the number. If formatProvider (parameter) is null, the return value uses
            the numeric format information from the current locale setting of the operating system.
            </param>
      <returns>
            A string representation of this object as specified by format (parameter) and formatProvider (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ToString(System.String)">
      <summary>
            Returns the String representation of the value of this object using the specified format.
            </summary>
      <param name="format">
            The String that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for Double and is applied to the real and imaginary
            parts of the complex number. If format (parameter) is null, the return value uses the default format.
            </param>
      <returns>
            A string representation of this object as specified by format (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ToString(System.IFormatProvider)">
      <summary>
            Returns the String representation of the value of this object using the specified culture-specific formatting information.
            </summary>
      <param name="formatProvider">
            The IFormatProvider to use to format the value.  This IFormatProvider is
            applied to the real and imaginary parts of the number. If formatProvider (parameter) is null, the return value uses
             the numeric format information from the current locale setting of the operating system.
            </param>
      <returns>
            A string representation of this object as specified by formatProvider (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ComposeArray(System.Double[],System.Double[])">
      <summary>
            Creates an array of ComplexDouble objects from 
            Double arrays that represent the real and imaginary parts of complex numbers.
            </summary>
      <param name="realData">
            The real parts of complex numbers.
            </param>
      <param name="imaginaryData">
            The imaginary parts of complex numbers.
            </param>
      <returns>
            A ComplexDouble array in which the real part of the
            n^th element is realData (parameter)[n] and the imaginary part is 
            imaginaryData (parameter)[n].
            </returns>
      <exception cref="T:System.ArgumentException">realData (parameter) and imaginaryData (parameter) do not have the same 
            length.
            </exception>
      <exception cref="T:System.ArgumentNullException">realData (parameter) is null.
            
            - or -
            imaginaryData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ComposeArray(System.Double[],System.Double[],System.Int32,System.Int32)">
      <summary>
            Creates an array of ComplexDouble objects from subsets of 
            Double arrays that represent the real and imaginary parts of complex numbers.
            </summary>
      <param name="realData">
            The real parts of complex numbers.
            </param>
      <param name="imaginaryData">
            The imaginary parts of complex numbers.
            </param>
      <param name="startIndex">
            The index in realData (parameter) (and imaginaryData (parameter)) from which to compose the ComplexDouble array.
            </param>
      <param name="length">
            The number of elements used, beginning at startIndex (parameter) in realData (parameter) and 
            imaginaryData (parameter), to compose the ComplexDouble array.
            </param>
      <returns>
            A ComplexDouble array in which the real part of the
            n^th  element is realData (parameter)[startIndex (parameter) + n] and the imaginary part is 
            imaginaryData (parameter)[startIndex (parameter) + n].
            </returns>
      <exception cref="T:System.ArgumentException">realData (parameter) and imaginaryData (parameter) do not have the same 
            length.
            </exception>
      <exception cref="T:System.ArgumentNullException">realData (parameter) is null.
            
            - or -
            imaginaryData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            - or -
            startIndex (parameter) is greater than or equal to the
            number of elements in realData (parameter) (or imaginaryData (parameter)).
            
            - or -
            length (parameter) is less than 0.
            
            - or -
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of realData (parameter) (or imaginaryData (parameter)).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ComposeArrayPolar(System.Double[],System.Double[])">
      <summary>
            Creates an array of ComplexDouble objects from 
            Double arrays that represent the magnitudes and phases of complex numbers.
            </summary>
      <param name="magnitudes">
            The magnitudes of complex numbers.
            </param>
      <param name="phases">
            The phases of complex numbers.
            </param>
      <returns>
            A ComplexDouble array in which the magnitude of the
            n^th element is magnitudes (parameter)[n]
             and the phase is phases (parameter)[n].
            </returns>
      <exception cref="T:System.ArgumentException">magnitudes (parameter) and phases (parameter) do not have the same 
            length.
            </exception>
      <exception cref="T:System.ArgumentNullException">magnitudes (parameter) is null.
            
            - or -
            phases (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ComposeArrayPolar(System.Double[],System.Double[],System.Int32,System.Int32)">
      <summary>
            Creates an array of ComplexDouble objects from subsets of
            Double arrays that represent the magnitudes and phases of complex numbers.
            </summary>
      <param name="magnitudes">
            The magnitudes of complex numbers.
            </param>
      <param name="phases">
            The phases of complex numbers.
            </param>
      <param name="startIndex">
            The index in magnitudes (parameter) and phases (parameter) from which to compose the ComplexDouble array.
            </param>
      <param name="length">
            The number of elements used, beginning at startIndex (parameter) in magnitudes (parameter) and 
            phases (parameter), to compose the ComplexDouble array.
            </param>
      <returns>
            A ComplexDouble array in which the magnitude of the
            n^th element is magnitudes (parameter)[startIndex (parameter) + n]
             and the phase is phases (parameter)[startIndex (parameter) + n].
            </returns>
      <exception cref="T:System.ArgumentException">magnitudes (parameter) and phases (parameter) do not have the same 
            length.
            </exception>
      <exception cref="T:System.ArgumentNullException">magnitudes (parameter) is null.
            
            - or -
            phases (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            - or -
            startIndex (parameter) is greater than or equal to the
            number of elements in magnitudes (parameter) or phases (parameter).
            
            - or -
            length (parameter) is less than 0.
            
            - or -
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of magnitudes (parameter) or phases (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.DecomposeArray(NationalInstruments.ComplexDouble[],System.Double[]@,System.Double[]@)">
      <summary>Extracts the real and imaginary parts of a ComplexDouble array.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <param name="realData">
            Upon return, contains an array that consists of the real parts of complexData (parameter).
            </param>
      <param name="imaginaryData">
            Upon return, contains an array that consists of the imaginary parts of complexData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.DecomposeArray(NationalInstruments.ComplexDouble[],System.Int32,System.Int32,System.Double[]@,System.Double[]@)">
      <summary>Extracts the real and imaginary parts of a subset of a ComplexDouble array.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <param name="startIndex">
            The index in complexData (parameter) from which to decompose into two Double arrays.
            </param>
      <param name="length">
            The number of elements used, beginning at startIndex (parameter) in complexData (parameter),
             to decompose into two Double arrays.
            </param>
      <param name="realData">
            Upon return, contains an array that consists of the real parts of complexData (parameter).
            </param>
      <param name="imaginaryData">
            Upon return, contains an array that consists of the imaginary parts of complexData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            - or -
            startIndex (parameter) is greater than or equal to the
            number of elements in complexData (parameter).
            
            - or -
            length (parameter) is less than 0.
            
            - or -
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of complexData (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.DecomposeArrayPolar(NationalInstruments.ComplexDouble[],System.Double[]@,System.Double[]@)">
      <summary>Extracts the magnitude and phase parts of a ComplexDouble array.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <param name="magnitudes">
            Upon return, contains an array that consists of the magnitudes of complexData (parameter).
            </param>
      <param name="phases">
            Upon return, contains an array that consists of the phases of complexData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.DecomposeArrayPolar(NationalInstruments.ComplexDouble[],System.Int32,System.Int32,System.Double[]@,System.Double[]@)">
      <summary>Extracts the magnitude and phase parts of a subset of a ComplexDouble array.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <param name="startIndex">
            The index in complexData (parameter) from which to decompose into two Double arrays.
            </param>
      <param name="length">
            The number of elements used, beginning at startIndex (parameter) in complexData (parameter),
             to decompose into two Double arrays.
            </param>
      <param name="magnitudes">
            Upon return, contains an array that consists of the magnitudes of complexData (parameter).
            </param>
      <param name="phases">
            Upon return, contains an array that consists of the phases of complexData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            - or -
            startIndex (parameter) is greater than or equal to the
            number of elements in complexData (parameter).
            
            - or -
            length (parameter) is less than 0.
            
            - or -
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of complexData (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.GetPhases(NationalInstruments.ComplexDouble[])">
      <summary>
            Extracts the phases of complex numbers from an array of ComplexDouble objects.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <returns>
            A Double array that contains the phases of the complex numbers in
            complexData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.GetMagnitudes(NationalInstruments.ComplexDouble[])">
      <summary>
            Extracts the magnitudes of complex numbers from an array of ComplexDouble objects.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <returns>
            A Double array that contains the magnitudes of the complex numbers in
            complexData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Parse(System.String)">
      <summary>
            Converts the string representation of a complex number to its
            ComplexDouble equivalent.
            </summary>
      <param name="s">
            A string containing a complex number to convert.
            </param>
      <returns>
            A ComplexDouble equivalent to the complex numeric value
            specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a complex number in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its ComplexDouble equivalent.
            </summary>
      <param name="s">
            A string containing a complex number to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information
            about s (parameter).
            </param>
      <returns>
            A ComplexDouble equivalent to the complex numeric value
            specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a complex number in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.TryParse(System.String,NationalInstruments.ComplexDouble@)">
      <summary>
            Converts the string representation of a complex number to its
            ComplexDouble equivalent.
            </summary>
      <param name="s">
            A string containing a complex number to convert.
            </param>
      <param name="result">
            A ComplexDouble equivalent to the complex numeric value
            specified by s (parameter).  If the return value is false, result (parameter)
            is Zero.
            </param>
      <returns>true if s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.TryParse(System.String,System.IFormatProvider,NationalInstruments.ComplexDouble@)">
      <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its ComplexDouble equivalent.
            </summary>
      <param name="s">
            A string containing a complex number to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information
            about s (parameter).
            </param>
      <param name="result">
            A ComplexDouble equivalent to the complex numeric value
            specified by s (parameter).  If the return value is false, result (parameter)
            is Zero.
            </param>
      <returns>true if s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.Real">
      <summary>
            Gets or sets the real part of the ComplexDouble.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.Imaginary">
      <summary>
            Gets or sets the imaginary part of the ComplexDouble.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.Magnitude">
      <summary>
            Gets the magnitude of the ComplexDouble.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.Phase">
      <summary>
            Gets the phase of the ComplexDouble.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.ComplexConjugate">
      <summary>
            Gets the complex conjugate of the ComplexDouble.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.Zero">
      <summary>
            Gets the complex number 0 + 0i.
            </summary>
    </member>
    <member name="T:NationalInstruments.WaveformTiming">
      <summary>
            Provides a class that encapsulates waveform timing information.
            </summary>
    </member>
    <member name="F:NationalInstruments.WaveformTiming.Empty">
      <summary>
            Represents a WaveformTiming that has no time stamp, time offset, or sample interval.
            </summary>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithNoInterval(System.DateTime)">
      <summary>
            Creates a WaveformTiming without an interval with the specified time stamp.
            </summary>
      <param name="timeStamp">
            The DateTime representing the start of an acquisition.
            </param>
      <returns>
            A WaveformTiming instance with no interval.
            </returns>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithNoInterval(System.TimeSpan)">
      <summary>
            Creates a WaveformTiming without an interval and with the specified time offset.
            </summary>
      <param name="timeOffset">
            The TimeSpan representing the time difference between the
            start of an acquisition and the first sample.
            </param>
      <returns>
            A WaveformTiming instance with no interval.
            </returns>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithNoInterval(System.DateTime,System.TimeSpan)">
      <summary>
            Creates a WaveformTiming without an interval with the specified time stamp and
            time offset.
            </summary>
      <param name="timeStamp">
            The DateTime representing the start of an acquisition.
            </param>
      <param name="timeOffset">
            The TimeSpan representing the time difference between the
            start of an acquisition and the first sample.
            </param>
      <returns>
            A WaveformTiming instance with no interval.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The timeStamp (parameter) plus timeOffset (parameter) is greater than MaxValue.
            
            -or-
            
            The timeStamp (parameter) plus timeOffset (parameter) is less than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan)">
      <summary>
            Creates a regular interval WaveformTiming with the specified sample interval.
            </summary>
      <param name="sampleInterval">
            The TimeSpan between samples.
            </param>
      <returns>
            A regular interval WaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan,System.TimeSpan)">
      <summary>
            Creates a regular interval WaveformTiming with the specified sample interval and
            time offset.
            </summary>
      <param name="sampleInterval">
            The TimeSpan between samples.
            </param>
      <param name="timeOffset">
            The TimeSpan representing the time between the
            start of an acquisition and the first sample.
            </param>
      <returns>
            A regular interval WaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan,System.DateTime)">
      <summary>
            Creates a regular interval WaveformTiming with the specified sample interval and
            time stamp.
            </summary>
      <param name="sampleInterval">
            The TimeSpan between samples.
            </param>
      <param name="timeStamp">
            The DateTime representing the start of an acquisition.
            </param>
      <returns>
            A regular interval WaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan,System.DateTime,System.TimeSpan)">
      <summary>
            Creates a regular interval WaveformTiming with the specified sample interval, 
            time stamp, and time offset.
            </summary>
      <param name="sampleInterval">
            The TimeSpan between samples.
            </param>
      <param name="timeStamp">
            The DateTime representing the start of an acquisition.
            </param>
      <param name="timeOffset">
            The TimeSpan representing the time difference between the
            start of an acquisition and the first sample.
            </param>
      <returns>
            A regular interval WaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            
            -or-
            
            The timeStamp (parameter) plus timeOffset (parameter) is greater than MaxValue.
            
            -or-
            
            The timeStamp (parameter) plus timeOffset (parameter) is less than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithIrregularInterval(System.DateTime[])">
      <summary>
            Creates a WaveformTiming with an irregular interval.
            </summary>
      <param name="timeStamps">
            An array of DateTime time stamp values
            that represents the irregular interval. The array needs to contain a time stamp for each point in the waveform that specifies the time that the point was acquired.
            </param>
      <returns>
            An irregular interval WaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentNullException">timeStamps (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">timeStamps (parameter) are not in ascending order.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.GetTimeStamps(System.Int32)">
      <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular and
            HasTimeStamp is false.
            	
            - or -
            
            The SampleIntervalMode is Regular,
            and the generated time stamp values are greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">
            The SampleIntervalMode is Irregular,
            and count (parameter) is greater than the number of irregular time stamps.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.GetTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	
            - or -
            
            The SampleIntervalMode is Regular,
            and the generated time stamp values are greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            
            The SampleIntervalMode is Irregular,
            and sampleIndex (parameter) plus count (parameter) is greater than the number of irregular time stamps.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	
            - or -
            
            The SampleIntervalMode is Regular,
            and the generated time stamp values are greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            
            The SampleIntervalMode is Irregular,
            and sampleIndex (parameter) plus count (parameter) is greater than the number of irregular time stamps.
            
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.Equals(System.Object)">
      <summary>
            Returns a value that indicates if this object is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this object.
            </param>
      <returns>true if obj (parameter) is a
            WaveformTiming that represents the same value as this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.HasTimeStamp">
      <summary>
            Gets a value indicating whether the WaveformTiming has a time stamp.
            </summary>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.TimeStamp">
      <summary>
            Gets the time stamp of the waveform.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.StartTime">
      <summary>
            Gets the time that the first sample in the waveform was acquired.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.TimeOffset">
      <summary>
            Gets the difference between the StartTime and the TimeStamp  of the waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.SampleIntervalMode">
      <summary>
            Gets the sample interval mode that determines how the waveform is sampled.
            </summary>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.SampleInterval">
      <summary>
            Gets the time interval between samples.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is not Regular.
            </exception>
    </member>
    <member name="T:NationalInstruments.PrecisionTimeSpan">
      <summary>
            Represents a time interval with a higher precision than TimeSpan.
            </summary>
    </member>
    <member name="F:NationalInstruments.PrecisionTimeSpan.SecondsPerFractionalTicks">
      <summary>
            Represents the number of seconds for each fractional second tick. This field is read-only.
            </summary>
    </member>
    <member name="F:NationalInstruments.PrecisionTimeSpan.MaxValue">
      <summary>
            Represents the largest possible value of PrecisionTimeSpan. This field is read-only.
            </summary>
    </member>
    <member name="F:NationalInstruments.PrecisionTimeSpan.MinValue">
      <summary>
            Represents the smallest possible value of PrecisionTimeSpan. This field is read-only.
            </summary>
    </member>
    <member name="F:NationalInstruments.PrecisionTimeSpan.Zero">
      <summary>
            Represents the zero PrecisionTimeSpan value.
            This field is read-only.
            </summary>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.#ctor(System.Int64,System.UInt64)">
      <summary>
            Initializes a new instance of the PrecisionTimeSpan
            structure with the specified whole seconds and fractional second ticks.
            </summary>
      <param name="wholeSeconds">
            The number of whole seconds to represent.
            </param>
      <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed. This value cannot be less than zero.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">fractionalSecondTicks (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.#ctor(System.Int64,System.Int64)">
      <summary>
            Initializes a new instance of the PrecisionTimeSpan
            structure with the specified whole seconds and fractional second ticks.
            </summary>
      <param name="wholeSeconds">
            The number of whole seconds to represent.
            </param>
      <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed. This value cannot be less than zero.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">fractionalSecondTicks (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the PrecisionTimeSpan
            structure to the specified date and time represented by a
            TimeSpan object.
            </summary>
      <param name="timeSpan">
            A TimeSpan which represents the time information to
            initialize the PrecisionTimeSpan.
            </param>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the PrecisionTimeSpan 
            structure with the specified number of seconds.
            </summary>
      <param name="seconds">
            The number of seconds to represent.
            </param>
      <exception cref="T:System.OverflowException">
            The time value represented by seconds (parameter) is less than
            MinValue or greater than
            MaxValue.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">seconds (parameter) is PositiveInfinity or
            NegativeInfinity.
            
            -or-
            seconds (parameter) is NaN.
            
            -or-
            seconds (parameter) is greater than MaxValue or
            less than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.ToTimeSpan">
      <summary>
            Converts the current PrecisionTimeSpan to a
            TimeSpan object.
            </summary>
      <returns>
            A TimeSpan object which represents the time of 
            the current PrecisionTimeSpan instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.FromTimeSpan(System.TimeSpan)">
      <summary>
            Returns a new PrecisionTimeSpan instance that
            represents the value of a TimeSpan.
            </summary>
      <param name="timeSpan">
            A TimeSpan which contains the time information to initialize
            the new PrecisionTimeSpan instance.
            </param>
      <returns>
            A PrecisionTimeSpan that represents the time
            specified by timeSpan (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.FromDays(System.Double)">
      <summary>
            Returns a PrecisionTimeSpan that represents a
            specified number of days.
            </summary>
      <param name="value">
            A number of days.
            </param>
      <returns>
            A PrecisionTimeSpan that represents
            value (parameter).
            </returns>
      <exception cref="T:System.OverflowException">value (parameter) is less than MinValue
            or greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is equal to NaN.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.FromHours(System.Double)">
      <summary>
            Returns a PrecisionTimeSpan that represents a
            specified number of hours.
            </summary>
      <param name="value">
            A number of hours.
            </param>
      <returns>
            A PrecisionTimeSpan that represents
            value (parameter).
            </returns>
      <exception cref="T:System.OverflowException">value (parameter) is less than MinValue
            or greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is equal to NaN.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.FromMinutes(System.Double)">
      <summary>
            Returns a PrecisionTimeSpan that represents a
            specified number of minutes.
            </summary>
      <param name="value">
            A number of minutes.
            </param>
      <returns>
            A PrecisionTimeSpan that represents
            value (parameter).
            </returns>
      <exception cref="T:System.OverflowException">value (parameter) is less than MinValue
            or greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is equal to NaN.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.FromSeconds(System.Double)">
      <summary>
            Returns a PrecisionTimeSpan that represents a
            specified number of seconds.
            </summary>
      <param name="value">
            A number of seconds.
            </param>
      <returns>
            A PrecisionTimeSpan that represents
            value (parameter).
            </returns>
      <exception cref="T:System.OverflowException">value (parameter) is less than MinValue
            or greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is equal to NaN.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.FromMilliseconds(System.Double)">
      <summary>
            Returns a PrecisionTimeSpan that represents a
            specified number of milliseconds.
            </summary>
      <param name="value">
            A number of milliseconds.
            </param>
      <returns>
            A PrecisionTimeSpan that represents
            value (parameter).
            </returns>
      <exception cref="T:System.OverflowException">value (parameter) is less than MinValue
            or greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">value (parameter) is equal to NaN.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">
            An object to compare with this instance.
            </param>
      <returns>true if obj (parameter) is a
            PrecisionTimeSpan object that
            represents the same time interval as the current
            PrecisionTimeSpan structure;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Equals(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified
            PrecisionTimeSpan object.
            </summary>
      <param name="other">
            A PrecisionTimeSpan object to compare with
            this instance.
            </param>
      <returns>true if other (parameter) represents the same time
            interval as this instance; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Equals(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Returns a value indicating whether two specified instances of 
            PrecisionTimeSpan are equal.
            </summary>
      <param name="t1">
            The first PrecisionTimeSpan.
            </param>
      <param name="t2">
            The second PrecisionTimeSpan.
            </param>
      <returns>true if the values of t1 (parameter) and
            t2 (parameter) are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Duration">
      <summary>
            Returns a new PrecisionTimeSpan object whose
            value is the absolute value of the current PrecisionTimeSpan
            object.
            </summary>
      <returns>
            A new PrecisionTimeSpan whose value is the absolute
            value of the current PrecisionTimeSpan object.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The value of this instance is MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Negate">
      <summary>
            Returns a PrecisionTimeSpan whose value is the negated
            value of this instance.
            </summary>
      <returns>
            A PrecisionTimeSpan which has the same numeric value as
            this instance, but with the opposite sign.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The negated value of this instance cannot be represented by a PrecisionTimeSpan;
            that is, the value of this instance is MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Add(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Adds the specified PrecisionTimeSpan to this
            instance.
            </summary>
      <param name="ts">
            A PrecisionTimeSpan to add to the current 
            PrecisionTimeSpan.
            </param>
      <returns>
            A PrecisionTimeSpan that represents the value
            of this instance plus the value of ts (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting PrecisionTimeSpan is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Subtract(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Subtracts the specified PrecisionTimeSpan from this instance.
            </summary>
      <param name="ts">
            A PrecisionTimeSpan to subtract.
            </param>
      <returns>
            A PrecisionTimeSpan whose value is the result of the value
            of this instance minus the value of ts (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The return value is less than MinValue
            or greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_Addition(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Adds two specified PrecisionTimeSpan instances.
            </summary>
      <param name="t1">
            The first PrecisionTimeSpan.
            </param>
      <param name="t2">
            The second PrecisionTimeSpan.
            </param>
      <returns>
            A PrecisionTimeSpan whose value is the sum of
            t1 (parameter) and t2 (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting PrecisionTimeSpan is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_Subtraction(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Subtracts a specified PrecisionTimeSpan from another
            specified PrecisionTimeSpan.
            </summary>
      <param name="t1">
            The first PrecisionTimeSpan.
            </param>
      <param name="t2">
            The second PrecisionTimeSpan.
            </param>
      <returns>
            A PrecisionTimeSpan whose value is the result
            of the value of t1 (parameter) minus the value of t2 (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The return value is less than MinValue
            or greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_UnaryPlus(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Returns the specified instance of PrecisionTimeSpan.
            </summary>
      <param name="ts">
            A PrecisionTimeSpan.
            </param>
      <returns>
            Returns ts (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_UnaryNegation(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Returns a PrecisionTimeSpan whose value is
            the negated value of the specified instance.
            </summary>
      <param name="ts">
            A PrecisionTimeSpan to negate.
            </param>
      <returns>
            A PrecisionTimeSpan with the same numeric value
            as this instance, but the opposite sign.
            </returns>
      <exception cref="T:System.OverflowException">
            The negated value of this instance cannot be represented by a
            PrecisionTimeSpan; that is, the value of this
            instance is MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_Multiply(NationalInstruments.PrecisionTimeSpan,System.Int64)">
      <summary>
            Multiples a specified PrecisionTimeSpan instance by a value.
            </summary>
      <param name="ts">
            The PrecisionTimeSpan instance to multiply.
            </param>
      <param name="value">
            The value to multiply ts (parameter) by.
            </param>
      <returns>
            A PrecisionTimeSpan whose value is ts (parameter) 
            multiplied by value (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting PrecisionTimeSpan is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Multiply(System.Int64)">
      <summary>
            Multiples this instance by a specified value.
            </summary>
      <param name="value">
            The value to multiply this instance by.
            </param>
      <returns>
            A PrecisionTimeSpan whose value is this instance
            multiplied by value (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting PrecisionTimeSpan is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_Division(NationalInstruments.PrecisionTimeSpan,System.Int64)">
      <summary>
            Divides a specified PrecisionTimeSpan instance by a value.
            </summary>
      <param name="ts">
            The PrecisionTimeSpan instance to divide.
            </param>
      <param name="value">
            The value to divide ts (parameter) by.
            </param>
      <returns>
            A PrecisionTimeSpan whose value is ts (parameter) 
            divided by value (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting PrecisionTimeSpan is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Divide(System.Int64)">
      <summary>
            Divides this instance by a specified value.
            </summary>
      <param name="value">
            The value to divide this instance by.
            </param>
      <returns>
            A PrecisionTimeSpan whose value is this instance
            divided by value (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting PrecisionTimeSpan is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_Equality(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Indicates whether two PrecisionTimeSpan instances
            are equal.
            </summary>
      <param name="t1">
            The first PrecisionTimeSpan.
            </param>
      <param name="t2">
            The second PrecisionTimeSpan.
            </param>
      <returns>true if the values of t1 (parameter) and
            t2 (parameter) are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_Inequality(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Indicates whether two PrecisionTimeSpan instances
            are not equal.
            </summary>
      <param name="t1">
            The first PrecisionTimeSpan.
            </param>
      <param name="t2">
            The second PrecisionTimeSpan.
            </param>
      <returns>true if the values of t1 (parameter) and t2 (parameter)
            are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_LessThan(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Indicates whether a specified PrecisionTimeSpan is less than
            another specified PrecisionTimeSpan.
            </summary>
      <param name="t1">
            The first PrecisionTimeSpan.
            </param>
      <param name="t2">
            The second PrecisionTimeSpan.
            </param>
      <returns>true if the value of t1 (parameter) is less than the
            value of t2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_GreaterThan(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Indicates whether a specified PrecisionTimeSpan is greater than
            another specified PrecisionTimeSpan.
            </summary>
      <param name="t1">
            The first PrecisionTimeSpan.
            </param>
      <param name="t2">
            The second PrecisionTimeSpan.
            </param>
      <returns>true if the value of t1 (parameter) is greater than the
            value of t2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_LessThanOrEqual(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Indicates whether a specified PrecisionTimeSpan is less than
            or equal to another specified PrecisionTimeSpan.
            </summary>
      <param name="t1">
            The first PrecisionTimeSpan.
            </param>
      <param name="t2">
            The second PrecisionTimeSpan.
            </param>
      <returns>true if the value of t1 (parameter) is less than 
            or equal to the value of t2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.op_GreaterThanOrEqual(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Indicates whether a specified PrecisionTimeSpan is greater than
            or equal to another specified PrecisionTimeSpan.
            </summary>
      <param name="t1">
            The first PrecisionTimeSpan.
            </param>
      <param name="t2">
            The second PrecisionTimeSpan.
            </param>
      <returns>true if the value of t1 (parameter) is greater than 
            or equal to the value of t2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Compare(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Compares two PrecisionTimeSpan values and returns
            an integer that indicates their relationship.
            </summary>
      <param name="t1">
            The first PrecisionTimeSpan.
            </param>
      <param name="t2">
            The second PrecisionTimeSpan.
            </param>
      <returns>
            A signed number indicating the relative values of t1 (parameter) and t2 (parameter).
            Value TypeCondition
            -1
            t1 (parameter) is less than t2 (parameter).
            
            0
            t1 (parameter) is equal to t2 (parameter).
            
            1
            t1 (parameter) is greater than t2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their
            relative values.
            </summary>
      <param name="obj">
            An object to compare, or null.
            </param>
      <returns>
            A signed number indicating the relative values of the current
            PrecisionTimeSpan instance
            and obj (parameter).
            Value TypeCondition
            -1
            
            				The value of this instance is less than the value
            of obj (parameter).
            
            0
            
            				The value of this instance is equal to the value
            of obj (parameter).
            
            1
            
            The value of this instance is greater than the value of obj (parameter).
            


            -or-
            

obj (parameter) is null.
            

</returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.CompareTo(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Compares this instance to a specified PrecisionTimeSpan 
            and returns an indication of their relative values.
            </summary>
      <param name="other">
            A PrecisionTimeSpan to compare to this instance.
            </param>
      <returns>
            A signed number indicating the relative values of the current
            PrecisionTimeSpan instance
            and other (parameter).
            Value TypeCondition
            -1
            
            				The value of this instance is less than the value
            of other (parameter).
            
            0
            
            				The value of this instance is equal to the value
            of other (parameter).
            
            1
            
            The value of this instance is greater than the value of other (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.Parse(System.String)">
      <summary>
            Constructs a new PrecisionTimeSpan object from
            a time interval specified in a string.
            </summary>
      <param name="timeSpan">
            A string that specifies a time interval.
            </param>
      <returns>
            A PrecisionTimeSpan that corresponds to timeSpan (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">timeSpan (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">timeSpan (parameter) has an invalid format.
            </exception>
      <exception cref="T:System.OverflowException">timeSpan (parameter) represents a number less than
            MinValue or greater than
            MaxValue.
            
            -or-
            
            At least one of the days, hours, minutes, or seconds components is outside its valid
            range.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.TryParse(System.String,NationalInstruments.PrecisionTimeSpan@)">
      <summary>
            Constructs a new PrecisionTimeSpan object from
            a time interval specified in a string. Parameters specify the time interval
            and the variable where the new PrecisionTimeSpan 
            object is returned.
            </summary>
      <param name="timeSpan">
            A string that specifies a time interval.
            </param>
      <param name="result">
            When this method returns, it contains an object that represents the time interval
            specified by timeSpan (parameter), or Zero
            if the conversion failed. This parameter is passed uninitialized.
            </param>
      <returns>true if timeSpan (parameter) was converted successfully;
            otherwise, false. This operation returns false
            if the timeSpan (parameter) parameter is null, has an invalid
            format, represents a time interval less than MinValue
            or greater than MaxValue, or has
            at least one days, hours, minutes, or seconds component outside its valid range.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionTimeSpan.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance. The return value is of the
            form:
            

[0][d.]hh:mm:ss[.ff]
            

Items in square brackets ([ and ]) are optional,
            colons and periods (: and .) are literal characters; and the other items are
            as follows.
            

ItemDescription
            "-"
            
            optional minus sign indicating a negative time
            
            d
            
            optional days
            
            hh
            
            hours, ranging from 0 to 23
            
            mm
            
            minutes, ranging from 0 to 59
            
            ss
            
            seconds, ranging from 9 to 59
            
            ff
            
            optional fractional seconds, from 1 to 7 decimal digits
            

</returns>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.WholeSeconds">
      <summary>
            Gets the value of the current PrecisionTimeSpan 
            structure expressed in whole seconds. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.FractionalSecondTicks">
      <summary>
            Gets the number of fractional second ticks represented by the current 
            PrecisionTimeSpan instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.FractionalSeconds">
      <summary>
            Gets the number of fractional seconds represented by the current 
            PrecisionTimeSpan instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.Days">
      <summary>
            Gets the number of whole days represented by the current PrecisionTimeSpan
            structure. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.Hours">
      <summary>
            Gets the number of whole hours represented by the current
            PrecisionTimeSpan structure. This property
            is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.Minutes">
      <summary>
            Gets the number of whole minutes represented by the current
            PrecisionTimeSpan structure.
            This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.Seconds">
      <summary>
            Gets the number of whole seconds represented by the current
            PrecisionTimeSpan structure.
            This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.Milliseconds">
      <summary>
            Gets the number of whole milliseconds represented by the current
            PrecisionTimeSpan structure.
            This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.TotalDays">
      <summary>
            Gets the value of the current PrecisionTimeSpan
            structure expressed in whole and fractional days. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.TotalHours">
      <summary>
            Gets the value of the current PrecisionTimeSpan
            structure expressed in whole and fractional hours. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.TotalMinutes">
      <summary>
            Gets the value of the current PrecisionTimeSpan
            structure expressed in whole and fractional minutes. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.TotalSeconds">
      <summary>
            Gets the value of the current PrecisionTimeSpan
            structure expressed in whole and fractional seconds. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionTimeSpan.TotalMilliseconds">
      <summary>
            Gets the value of the current PrecisionTimeSpan
            structure expressed in whole and fractional milliseconds. This property is read-only.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalWaveform">
      <summary>
            Provides a data type that encapsulates digital data and timing information.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of DigitalWaveform with the specified sample and signal
            count.
            </summary>
      <param name="sampleCount">
            The number of samples in the DigitalWaveform.
            </param>
      <param name="signalCount">
            The number of signals in the DigitalWaveform.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            signalCount (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.#ctor(System.Int32,System.Int32,NationalInstruments.DigitalState)">
      <summary>
            Initializes a new instance of DigitalWaveform with the specified sample count, signal
            count, and default value.
            </summary>
      <param name="sampleCount">
            The number of samples in the DigitalWaveform.
            </param>
      <param name="signalCount">
            The number of signals in the DigitalWaveform.
            </param>
      <param name="defaultValue">
            The DigitalState to initialize the DigitalWaveform with.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            signalCount (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">defaultValue (parameter) is an invalid DigitalState value.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.CopyStates(NationalInstruments.DigitalWaveform,NationalInstruments.DigitalWaveform,System.Int32,System.Int32)">
      <summary>
            Copies the data of a source digital waveform to a destination digital waveform.
            </summary>
      <param name="sourceWaveform">
            The source DigitalWaveform.
            </param>
      <param name="destinationWaveform">
            The destination DigitalWaveform.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <param name="signalCount">
            The number of signals to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The sourceWaveform (parameter) is null.
            
            -or-
            
            The destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            signalCount (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is greater than
            sourceWaveform (parameter) sample count.
            
            -or-
            sampleCount (parameter) is greater than
            destinationWaveform (parameter) sample count.
            
            -or-
            signalCount (parameter) is greater than
            sourceWaveform (parameter) signal count.
            
            -or-
            signalCount (parameter) is greater than
            destinationWaveform (parameter) signal count.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.CopyStates(NationalInstruments.DigitalWaveform,System.Int32,System.Int32,NationalInstruments.DigitalWaveform,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Copies the data of a source digital waveform to a destination digital waveform with the specified indexes.
            </summary>
      <param name="sourceWaveform">
            The source DigitalWaveform.
            </param>
      <param name="sourceSampleIndex">
            The source sample index.
            </param>
      <param name="sourceSignalIndex">
            The source signal index.
            </param>
      <param name="destinationWaveform">
            The destination DigitalWaveform.
            </param>
      <param name="destinationSampleIndex">
            The destination sample index.
            </param>
      <param name="destinationSignalIndex">
            The destination signal index.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <param name="signalCount">
            The number of signals to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The sourceWaveform (parameter) is null.
            
            -or-
            
            The destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sourceSampleIndex (parameter) is less than zero.
            
            -or-
            sourceSignalIndex (parameter) is less than zero.
            
            -or-
            destinationSampleIndex (parameter) is less than zero.
            
            -or-
            destinationSignalIndex (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is less than zero.
            
            -or-
            signalCount (parameter) is less than zero.
            
            -or-
            sourceSampleIndex (parameter) + sampleCount (parameter) is greater than
            sourceWaveform (parameter) sample count.
            
            -or-
            destinationSampleIndex (parameter) + sampleCount (parameter) is greater than
            destinationWaveform (parameter) sample count.
            
            -or-
            sourceSignalIndex (parameter) + signalCount (parameter) is greater than
            sourceWaveform (parameter) signal count.
            
            -or-
            destinationSignalIndex (parameter) + signalCount (parameter) is greater than
            destinationWaveform (parameter) signal count.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.Test(NationalInstruments.DigitalWaveform)">
      <summary>
            Tests the digital waveform against an expected digital waveform.
            </summary>
      <param name="expectedWaveform">
            The expected DigitalWaveform.
            </param>
      <returns>
            A DigitalWaveformTestResult containing the test results.
            </returns>
      <exception cref="T:System.ArgumentNullException">expectedWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The digital waveform and the expectedWaveform (parameter) signal counts are not equal.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.Test(System.Int32,NationalInstruments.DigitalWaveform,System.Int32,System.Int32)">
      <summary>
            Tests the digital waveform against an expected digital waveform using the specified start sample and expected start sample.
            </summary>
      <param name="startSample">
            The beginning sample to compare.
            </param>
      <param name="expectedWaveform">
            The expected DigitalWaveform.
            </param>
      <param name="expectedStartSample">
            The beginning sample of the expected DigitalWaveform to compare. 
            </param>
      <param name="sampleCount">
            The number of samples to compare.
            </param>
      <exception cref="T:System.ArgumentNullException">expectedWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startSample (parameter) is less than zero.
            
            -or-
            expectedStartSample (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is less than zero.
            
            -or-
            startSample (parameter) plus sampleCount (parameter) is greater than
            the digital waveform sample count.
            
            -or-
            expectedStartSample (parameter) plus sampleCount (parameter) is greater than
            the expectedWaveform (parameter) sample count.
            </exception>
      <exception cref="T:System.ArgumentException">
            The digital waveform and the expectedWaveform (parameter) signal counts are not equal.
            </exception>
      <returns>
            A DigitalWaveformTestResult containing the test results.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Byte[0:,0:])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional Byte array.
            </summary>
      <param name="samples">
            The two-dimensional Byte array of samples.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Byte[0:,0:],System.Byte[])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional Byte array with
            the specified mask array.
            </summary>
      <param name="samples">
            The two-dimensional Byte array of samples.
            </param>
      <param name="masks">
            The mask array used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            
            -or-
            masks (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in samples (parameter) is not equal to the length of masks (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Byte[])">
      <summary>
            Creates a DigitalWaveform from a Byte array.
            </summary>
      <param name="samples">
            The Byte array of samples.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Byte[],System.Byte)">
      <summary>
            Creates a DigitalWaveform from a Byte array and a
            mask.
            </summary>
      <param name="samples">
            The Byte array of samples.
            </param>
      <param name="mask">
            The mask used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int16[0:,0:])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 16-bit integers.
            </summary>
      <param name="samples">
            The two-dimensional array of 16-bit integer samples.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int16[0:,0:],System.Int16[])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 16-bit integers with
            the specified mask array.
            </summary>
      <param name="samples">
            The two-dimensional array of 16-bit integer samples.
            </param>
      <param name="masks">
            The mask array used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            
            -or-
            masks (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in samples (parameter) is not equal to the length of masks (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int16[])">
      <summary>
            Creates a DigitalWaveform from an array of 16-bit integers.
            </summary>
      <param name="samples">
            The array of 16-bit integer samples.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int16[],System.Int16)">
      <summary>
            Creates a DigitalWaveform from an array of 16-bit integers and a
            mask.
            </summary>
      <param name="samples">
            The array of 16-bit integer samples.
            </param>
      <param name="mask">
            The mask used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt16[0:,0:])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 16-bit unsigned integers.
            </summary>
      <param name="samples">
            The two-dimensional array of 16-bit unsigned integer samples.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt16[0:,0:],System.UInt16[])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 16-bit unsigned integers with
            the specified mask array.
            </summary>
      <param name="samples">
            The two-dimensional array of 16-bit unsigned integer samples.
            </param>
      <param name="masks">
            The mask array used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            
            -or-
            masks (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in samples (parameter) is not equal to the length of masks (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt16[])">
      <summary>
            Creates a DigitalWaveform from an array of 16-bit unsigned integers.
            </summary>
      <param name="samples">
            The array of 16-bit unsigned integer samples.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt16[],System.UInt16)">
      <summary>
            Creates a DigitalWaveform from an array of 16-bit unsigned integers and a
            mask.
            </summary>
      <param name="samples">
            The array of 16-bit unsigned integer samples.
            </param>
      <param name="mask">
            The mask used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int32[0:,0:])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 32-bit integers.
            </summary>
      <param name="samples">
            The two-dimensional array of 32-bit integer samples.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int32[0:,0:],System.Int32[])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 32-bit integers with
            the specified mask array.
            </summary>
      <param name="samples">
            The two-dimensional array of 32-bit integer samples.
            </param>
      <param name="masks">
            The mask array used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            
            -or-
            masks (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in samples (parameter) is not equal to the length of masks (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int32[])">
      <summary>
            Creates a DigitalWaveform from an array of 32-bit integers.
            </summary>
      <param name="samples">
            The array of 32-bit integer samples.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int32[],System.Int32)">
      <summary>
            Creates a DigitalWaveform from an array of 32-bit integers and a
            mask.
            </summary>
      <param name="samples">
            The array of 32-bit integer samples.
            </param>
      <param name="mask">
            The mask used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt32[0:,0:])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 32-bit unsigned integers.
            </summary>
      <param name="samples">
            The two-dimensional array of 32-bit unsigned integer samples.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt32[0:,0:],System.UInt32[])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 32-bit unsigned integers with
            the specified mask array.
            </summary>
      <param name="samples">
            The two-dimensional array of 32-bit unsigned integer samples.
            </param>
      <param name="masks">
            The mask array used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            
            -or-
            masks (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in samples (parameter) is not equal to the length of masks (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt32[])">
      <summary>
            Creates a DigitalWaveform from an array of 32-bit unsigned integers.
            </summary>
      <param name="samples">
            The array of 32-bit unsigned integer samples.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt32[],System.UInt32)">
      <summary>
            Creates a DigitalWaveform from an array of 32-bit unsigned integers and a
            mask.
            </summary>
      <param name="samples">
            The array of 32-bit unsigned integer samples.
            </param>
      <param name="mask">
            The mask used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.GetTimeStamps">
      <summary>
            Retrieves the time stamps from Timing.
            </summary>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStamps">
      <summary>
            Retrieves the time stamps from PrecisionTiming.
            </summary>
      <returns>
            A PrecisionDateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	</exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.GetTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using the 
            specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the digital waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps from PrecisionTiming using the 
            specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the digital waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A PrecisionDateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using the 
            specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the digital waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStamps(System.Int32,System.Int32,NationalInstruments.PrecisionDateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps from PrecisionTiming using the 
            specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the digital waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.Signals">
      <summary>
            Gets the signals of the digital waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.Samples">
      <summary>
            Gets the samples of the digital waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.Timing">
      <summary>
            Gets or sets the timing information of the digital waveform.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            	The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">SampleIntervalMode is Irregular.
            
            -or-
            
            The time stamp values are greater than MaxValue.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.PrecisionTiming">
      <summary>
            Gets or sets the timing information of the digital waveform with a higher precision
            than Timing.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            	The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">SampleIntervalMode is Irregular.
            
            -or-
            
            The time stamp values are greater than MaxValue.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.IsPrecisionTimingInitialized">
      <summary>
            Gets a value indicating whether the precision timing information for the waveform has been initialized.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.ExtendedProperties">
      <summary>
            Gets the extended properties for the digital waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.ChannelName">
      <summary>
            Gets or sets the name of the device channel from which the digital waveform was acquired.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalStateCollection">
      <summary>
            Represents a strongly typed collection of DigitalState values.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalStateCollection.CopyTo(NationalInstruments.DigitalState[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalStateCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalStateCollection.Item(System.Int32)">
      <summary>
            Gets or sets the DigitalState at the specified index. 
            </summary>
      <param name="stateIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">stateIndex (parameter) is an invalid DigitalState value.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">stateIndex (parameter) is less than zero.
            
            -or-
            

stateIndex (parameter) is greater than or equal to Count.
            


            -or-
            stateIndex (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalStateCollection.Count">
      <summary>
            Gets the number of states in the DigitalStateCollection.
            </summary>
    </member>
    <member name="T:NationalInstruments.ComplexInt16">
      <summary>
            Represents a complex number of type Int16 that is composed of a real part and an imaginary part.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.#ctor(System.Int16,System.Int16)">
      <summary>
            Initializes a new instance of the ComplexInt16 class with the specified real and imaginary values.
            </summary>
      <param name="real">
            The real part of the complex number.
            </param>
      <param name="imaginary">
            The imaginary part of the complex number.
            </param>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.FromInt16(System.Int16)">
      <summary>
            Creates a ComplexInt16 from an Int16 real value.
            </summary>
      <param name="real">
            The real part of the complex number.
            </param>
      <returns>
            A ComplexInt16 with the real part specified by real (parameter)
            and a 0 imaginary part.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Plus">
      <summary>
            Returns this instance of the ComplexInt16 (unary plus).
            </summary>
      <returns>
            This instance of the ComplexInt16.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.op_UnaryPlus(NationalInstruments.ComplexInt16)">
      <summary>
            Returns the specified instance of the ComplexInt16 (unary plus).
            </summary>
      <param name="c">
            A ComplexInt16.
            </param>
      <returns>
            The specified instance of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Negate">
      <summary>
            Returns a ComplexInt16 with a value that is 
            the negated value of this object (unary minus).
            </summary>
      <returns>
            A ComplexInt16 with a value that is the negated value 
            of this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.op_UnaryNegation(NationalInstruments.ComplexInt16)">
      <summary>
            Returns a ComplexInt16 with a value that is the negative of the specified 
            object (unary minus).
            </summary>
      <param name="c">
            A ComplexInt16.
            </param>
      <returns>
            A ComplexInt16 with a value that is the negative of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Add(NationalInstruments.ComplexInt16)">
      <summary>
            Adds the value of the specified ComplexInt16 to this object and returns a 
            new ComplexInt16 that represents the sum.
            </summary>
      <param name="c">
            The ComplexInt16 to add to this object.
            </param>
      <returns>
            A ComplexInt16 that represents the value of this 
            object plus the value of c (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than MaxValue
            or smaller than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.op_Addition(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
      <summary>
            Adds the values of two ComplexInt16 objects.
            </summary>
      <param name="c1">
            A ComplexInt16.
            </param>
      <param name="c2">
            A ComplexInt16.
            </param>
      <returns>
            A ComplexInt16 with a value that is the sum of 
            c1 (parameter) and c2 (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than MaxValue
            or smaller than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Subtract(NationalInstruments.ComplexInt16)">
      <summary>
            Subtracts the value of a ComplexInt16 from this object and 
            returns a new ComplexInt16 that represents the difference.
            </summary>
      <param name="c">
            The ComplexInt16 to subtract from this object.
            </param>
      <returns>
            A ComplexInt16 that represents the value of this
            object minus the value of c (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than MaxValue
            or smaller than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.op_Subtraction(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
      <summary>
            Subtracts the value of one ComplexInt16 from the value of another ComplexInt16.
            </summary>
      <param name="c1">
            A ComplexInt16.
            </param>
      <param name="c2">
            A ComplexInt16.
            </param>
      <returns>
            A ComplexInt16 with a value that is the result of 
            c1 (parameter) minus c2 (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than MaxValue
            or smaller than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Multiply(NationalInstruments.ComplexInt16)">
      <summary>
            Multiplies a ComplexInt16 with this object and 
            returns a new ComplexInt16 that represents the product.
            </summary>
      <param name="c">
            The ComplexInt16 to multiply with this object.
            </param>
      <returns>
            A ComplexInt16 that represents the value of this
            object times the value of c (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than MaxValue
            or smaller than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.op_Multiply(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
      <summary>
            Multiplies the values of two ComplexInt16 objects.
            </summary>
      <param name="c1">
            A ComplexInt16.
            </param>
      <param name="c2">
            A ComplexInt16.
            </param>
      <returns>
            A ComplexInt16 with a value that is the product of 
            c1 (parameter) and c2 (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than MaxValue
            or smaller than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Divide(NationalInstruments.ComplexInt16)">
      <summary>
            Divides this object by a ComplexInt16 and returns
            a new ComplexInt16 that represents the result.
            </summary>
      <param name="c">
            The ComplexInt16 by which to divide this object.
            </param>
      <returns>
            A ComplexInt16 that represents the value of this
            object divided by the value of c (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than MaxValue
            or smaller than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.op_Division(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
      <summary>
            Divides the value of a ComplexInt16 by the value of another ComplexInt16.
            </summary>
      <param name="c1">
            A ComplexInt16.
            </param>
      <param name="c2">
            A ComplexInt16.
            </param>
      <returns>
            A ComplexInt16 with a value that is equal to  
            c1 (parameter) divided by c2 (parameter).
            </returns>
      <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than MaxValue
            or smaller than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.op_Explicit(System.Int16)~NationalInstruments.ComplexInt16">
      <summary>
            Creates a ComplexInt16 from an Int16 real value.
            </summary>
      <param name="real">
            The real part of the complex number.
            </param>
      <returns>
            A ComplexInt16 with the real part specified by real (parameter)
            and a 0 imaginary part.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.op_Equality(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
      <summary>
            Returns a Boolean that indicates if two ComplexInt16 objects are 
            equal.
            </summary>
      <param name="c1">
            A ComplexInt16.
            </param>
      <param name="c2">
            A ComplexInt16.
            </param>
      <returns>true if the values of c1 (parameter) and c2 (parameter)
            are equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.op_Inequality(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
      <summary>
            Returns a Boolean that indicates if two ComplexInt16 objects are 
            not equal.
            </summary>
      <param name="c1">
            A ComplexInt16.
            </param>
      <param name="c2">
            A ComplexInt16.
            </param>
      <returns>true if the values of c1 (parameter) and c2 (parameter)
            are not equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Equals(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
      <summary>
            Returns a Boolean value that indicates if two specified ComplexInt16 objects are equal.
            </summary>
      <param name="c1">
            A ComplexInt16.
            </param>
      <param name="c2">
            A ComplexInt16.
            </param>
      <returns>true if c1 (parameter) and c2 (parameter) are equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Equals(System.Object)">
      <summary>
            Returns a Boolean value that indicates if this object is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this object.
            </param>
      <returns>true if obj (parameter) is a
            ComplexInt16 that represents the same value as this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Equals(NationalInstruments.ComplexInt16)">
      <summary>
            Returns a Boolean value that indicates if this object is equal to the specified 
            ComplexInt16.
            </summary>
      <param name="c">
            A ComplexInt16 to compare with this object.
            </param>
      <returns>true if c (parameter) represents the same value  
            as this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns the String representation of the value of this object using the specified format and culture-specific 
            formatting information.
            </summary>
      <param name="format">
            	The String that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for Int16 and is applied to the real and imaginary
            parts of the complex number. If format (parameter) is null,  the return value uses the default format.</param>
      <param name="formatProvider">
            The IFormatProvider to use to format the value.  This IFormatProvider is
            applied to the real and imaginary parts of the number. If formatProvider (parameter) is null, the return value uses
            the numeric format information from the current locale setting of the operating system.
            </param>
      <returns>
            A string representation of this object as specified by format (parameter) and formatProvider (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.ToString(System.String)">
      <summary>
            Returns the String representation of the value of this object using the specified format.
            </summary>
      <param name="format">
            The String that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for Int16 and is applied to the real and imaginary
            parts of the complex number. If format (parameter) is null, the return value uses the default format.
            </param>
      <returns>
            A string representation of this object as specified by format (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.ToString(System.IFormatProvider)">
      <summary>
            Returns the String representation of the value of this object using the specified culture-specific formatting information.
            </summary>
      <param name="formatProvider">
            The IFormatProvider to use to format the value.  This IFormatProvider is
            applied to the real and imaginary parts of the number. If formatProvider (parameter) is null, the return value uses
             the numeric format information from the current locale setting of the operating system.
            </param>
      <returns>
            A string representation of this object as specified by formatProvider (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.ComposeArray(System.Int16[],System.Int16[])">
      <summary>
            Creates an array of ComplexInt16 objects from 
            Int16 arrays that represent the real and imaginary parts of complex numbers.
            </summary>
      <param name="realData">
            The real parts of complex numbers.
            </param>
      <param name="imaginaryData">
            The imaginary parts of complex numbers.
            </param>
      <returns>
            A ComplexInt16 array in which the real part of the
            n^th element is realData (parameter)[n] and the imaginary part is 
            imaginaryData (parameter)[n].
            </returns>
      <exception cref="T:System.ArgumentException">realData (parameter) and imaginaryData (parameter) do not have the same 
            length.
            </exception>
      <exception cref="T:System.ArgumentNullException">realData (parameter) is null.
            
            - or -
            imaginaryData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.ComposeArray(System.Int16[],System.Int16[],System.Int32,System.Int32)">
      <summary>
            Creates an array of ComplexInt16 objects from subsets of 
            Int16 arrays that represent the real and imaginary parts of complex numbers.
            </summary>
      <param name="realData">
            The real parts of complex numbers.
            </param>
      <param name="imaginaryData">
            The imaginary parts of complex numbers.
            </param>
      <param name="startIndex">
            The index in realData (parameter) (and imaginaryData (parameter)) from which to compose the ComplexInt16 array.
            </param>
      <param name="length">
            The number of elements used, beginning at startIndex (parameter) in realData (parameter) or 
            imaginaryData (parameter), to compose the ComplexInt16 array.
            </param>
      <returns>
            A ComplexInt16 array in which the real part of the
            n^th  element is realData (parameter)[startIndex (parameter) + n] and the imaginary part is 
            imaginaryData (parameter)[startIndex (parameter) + n].
            </returns>
      <exception cref="T:System.ArgumentException">realData (parameter) and imaginaryData (parameter) do not have the same 
            length.
            </exception>
      <exception cref="T:System.ArgumentNullException">realData (parameter) is null.
            
            - or -
            imaginaryData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            - or -
            startIndex (parameter) is greater than or equal to the
            number of elements in realData (parameter) (or imaginaryData (parameter)).
            
            - or -
            length (parameter) is less than 0.
            
            - or -
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of realData (parameter) (or imaginaryData (parameter)).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.DecomposeArray(NationalInstruments.ComplexInt16[],System.Int16[]@,System.Int16[]@)">
      <summary>Extracts the real and imaginary parts of a ComplexInt16 array.
            </summary>
      <param name="complexData">
            A ComplexInt16 array.
            </param>
      <param name="realData">
            Upon return, contains an array that consists of the real parts of complexData (parameter).
            </param>
      <param name="imaginaryData">
            Upon return, contains an array that consists of the imaginary parts of complexData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.DecomposeArray(NationalInstruments.ComplexInt16[],System.Int32,System.Int32,System.Int16[]@,System.Int16[]@)">
      <summary>Extracts the real and imaginary parts of a subset of a ComplexInt16 array.
            </summary>
      <param name="complexData">
            A ComplexInt16 array.
            </param>
      <param name="startIndex">
            The index in complexData (parameter) from which to decompose into two Int16 arrays.
            </param>
      <param name="length">
            The number of elements used, beginning at startIndex (parameter) in complexData (parameter),
             to decompose into two Int16 arrays.
            </param>
      <param name="realData">
            Upon return, contains an array that consists of the real parts of complexData (parameter).
            </param>
      <param name="imaginaryData">
            Upon return, contains an array that consists of the imaginary parts of complexData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            - or -
            startIndex (parameter) is greater than or equal to the
            number of elements in complexData (parameter).
            
            - or -
            length (parameter) is less than 0.
            
            - or -
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of complexData (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Parse(System.String)">
      <summary>
            Converts the string representation of a complex number to its
            ComplexInt16 equivalent.
            </summary>
      <param name="s">
            A string containing a complex number to convert.
            </param>
      <returns>
            A ComplexInt16 equivalent to the complex numeric value
            specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a complex number in a valid format.
            
            - or -
            


            One or both of Real or Imaginary parts are not a valid Int16.
            
            - or -
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its ComplexInt16 equivalent.
            </summary>
      <param name="s">
            A string containing a complex number to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information
            about s (parameter).
            </param>
      <returns>
            A ComplexInt16 equivalent to the complex numeric value
            specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a complex number in a valid format.
            
            - or -
            


            One or both of Real or Imaginary parts are not a valid Int16.
            
            - or -
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.TryParse(System.String,NationalInstruments.ComplexInt16@)">
      <summary>
            Converts the string representation of a complex number to its
            ComplexInt16 equivalent.
            </summary>
      <param name="s">
            A string containing a complex number to convert.
            </param>
      <param name="result">
            A ComplexInt16 equivalent to the complex numeric value
            specified by s (parameter).  If the return value is false, result (parameter)
            is Zero.
            </param>
      <returns>true if s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexInt16.TryParse(System.String,System.IFormatProvider,NationalInstruments.ComplexInt16@)">
      <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its ComplexInt16 equivalent.
            </summary>
      <param name="s">
            A string containing a complex number to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information
            about s (parameter).
            </param>
      <param name="result">
            A ComplexInt16 equivalent to the complex numeric value
            specified by s (parameter).  If the return value is false, result (parameter)
            is Zero.
            </param>
      <returns>true if s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="P:NationalInstruments.ComplexInt16.Real">
      <summary>
            Gets or sets the real part of the ComplexInt16.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexInt16.Imaginary">
      <summary>
            Gets or sets the imaginary part of the ComplexInt16.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexInt16.ComplexConjugate">
      <summary>
            Gets the complex conjugate of the ComplexInt16.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexInt16.Zero">
      <summary>
            Gets the complex number 0 + 0i.
            </summary>
    </member>
    <member name="T:NationalInstruments.AnalogWaveformSampleCollection`1">
      <summary>
            Represents a strongly typed collection of AnalogWaveformSample&lt;T&gt; objects.
            </summary>
      <typeparam name="TData">
            The type of the sample collection.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.CopyTo(NationalInstruments.AnalogWaveformSample{`0}[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#CopyTo(NationalInstruments.AnalogWaveformSample{`0}[],System.Int32)">
      <summary>
            Copies the elements of the ICollection&lt;T&gt; to an array, starting at a particular array index.
             
            </summary>
      <param name="array">
            The one-dimensional array that is the destination of the elements copied from ICollection&lt;T&gt;.
            The array must have zero-based indexing.
            </param>
      <param name="index">
            The zero-based index in array (parameter) at which copying begins.
            </param>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.IndexOf(NationalInstruments.AnalogWaveformSample{`0})">
      <summary>
            Searches for the AnalogWaveformSample&lt;T&gt; and returns the zero-based index of the first
            occurrence.
            </summary>
      <param name="sample">
            The AnalogWaveformSample&lt;T&gt; to locate.
            </param>
      <returns>
            The zero-based index of the first occurrence of sample (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#Contains(NationalInstruments.AnalogWaveformSample{`0})">
      <summary>
            Determines whether the ICollection&lt;T&gt; contains a specific value.
            </summary>
      <param name="item">
            The object to locate in the ICollection&lt;T&gt;.
            </param>
      <returns>true if item is found in the ICollection&lt;T&gt;; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#Remove(NationalInstruments.AnalogWaveformSample{`0})">
      <summary>
            This method is not supported.
            </summary>
      <param name="item">This parameter is not documented because the method is not supported.</param>
      <returns>The return value is not documented because the method is not supported.</returns>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#Clear">
      <summary>
            This method is not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#Add(NationalInstruments.AnalogWaveformSample{`0})">
      <summary>
            This method is not supported.
            </summary>
      <param name="item">This parameter is not documented because the method is not supported.</param>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#IEnumerable{NationalInstruments#AnalogWaveformSample{TData}}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An IEnumerator&lt;T&gt;  that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.Item(System.Int32)">
      <summary>
            Gets the AnalogWaveformSample&lt;T&gt; at the specified index. 
            </summary>
      <param name="sampleIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            

sampleIndex (parameter) is greater than or equal to count.
            


            -or-
            sampleIndex (parameter) is greater than or equal to count.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.Count">
      <summary>
            Gets the number of samples in AnalogWaveformSampleCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#IsReadOnly">
      <summary>
            Gets a value indicating whether the ICollection&lt;T&gt;  is read-only.
            </summary>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.#ctor(System.Func{`0,`1},System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new LazyMap&lt;T1,T2&gt; instance using the specified initialize method and key comparer.
            </summary>
      <param name="initialize">The method to use to initialize new elements.</param>
      <param name="enableCaching">Determines whether values will be cached.</param>
      <param name="comparer">
            The IEqualityComparer&lt;T&gt; implementation to use when comparing keys, 
            or null to use the default EqualityComparer&lt;T&gt; for the type of the key.
            </param>
      <exception cref="T:System.ArgumentNullException">initialize (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.#ctor(System.Func{`0,`1},System.Boolean)">
      <summary>
            Creates a new LazyMap&lt;T1,T2&gt; instance using the specified initialize method and key comparer.
            </summary>
      <param name="initialize">The method to use to initialize new elements.</param>
      <param name="enableCaching">Determines whether values will be cached.</param>
      <exception cref="T:System.ArgumentNullException">initialize (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Creates a new LazyMap&lt;T1,T2&gt; instance using the specified initialize method and key comparer.
            </summary>
      <param name="initialize">The method to use to initialize new elements.</param>
      <param name="comparer">
            The IEqualityComparer&lt;T&gt; implementation to use when comparing keys, 
            or null to use the default EqualityComparer&lt;T&gt; for the type of the key.
            </param>
      <exception cref="T:System.ArgumentNullException">initialize (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.#ctor(System.Func{`0,`1})">
      <summary>
            Creates a new LazyMap&lt;T1,T2&gt; instance using the specified initialize method.
            </summary>
      <param name="initialize">The method to use to initialize new elements.</param>
      <exception cref="T:System.ArgumentNullException">initialize (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.#ctor">
      <summary>
            Creates a new LazyMap&lt;T1,T2&gt; instance using a default initialize method.
            </summary>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.CurrentlyContainsKey(`0)">
      <summary>
            Determines whether the specified key is currently in the dictionary.
            </summary>
      <param name="key">The key to test.</param>
      <returns>true if key (parameter) is in the dictionary; otherwise, false.</returns>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.TryGetCurrent(`0,`1@)">
      <summary>
            Attempts to get the value associated with the specified key from the dictionary.
            </summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">
            When this method returns, contains the object from the dictionary with the specified key,
            or the default value of TValue (generic type parameter) if the operation failed.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.TryRemoveCurrent(`0,`1@)">
      <summary>
            Attempts to remove and return the value associated with the specified key from the dictionary.
            </summary>
      <param name="key">The key of the value to remove and return.</param>
      <param name="value">
            When this method returns, contains the object from the dictionary with the specified key,
            or the default value of TValue (generic type parameter) if the operation failed.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.GetOrAdd(`0,System.Func{`0,`1})">
      <summary>
            Adds a key/value pair to the dictionary, if the key does not already exist.
            </summary>
      <param name="key">The key of the element to add.</param>
      <param name="valueFactory">The function used to generate a value for the key.</param>
      <returns>
            The value for the key.
            This will be either the existing value for the key if the key is already in the dictionary,
            or the new value for the key as returned by valueFactory (parameter) if the key was not in the dictionary or caching is disabled.
            </returns>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.Clear">
      <summary>
            Removes all cached keys and values from the collection.
            </summary>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.DisableCaching">
      <summary>
            Disables caching of values in the lazy map.
            </summary>
    </member>
    <member name="M:NationalInstruments.Restricted.LazyMap`2.ToString" />
    <member name="P:NationalInstruments.Restricted.LazyMap`2.Item(`0)">
      <summary>
            Gets or sets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get or set.</param>
      <returns>
            The value associated with the specified key. If the specified key is not found, 
            a new element will be initialized for that key and returned (using the initialize method specified in the constructor).
            </returns>
      <exception cref="T:System.InvalidOperationException">
                Caching is disabled.
                -or-

KeyFilter returns false for key (parameter).

-or-KeyFilter returns false for key (parameter).</exception>
    </member>
    <member name="P:NationalInstruments.Restricted.LazyMap`2.IsCaching">
      <summary>
            Gets a value indicating whether caching is enabled on the map.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.LazyMap`2.KeyFilter">
      <summary>
            Gets or sets a predicate used to filter which keys are stored in the cache when caching is enabled.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.LazyMap`2.CurrentCount">
      <summary>
            Gets the number of items currently in the dictionary.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.LazyMap`2.CurrentKeys">
      <summary>
            Gets the collection of keys currently in the dictionary.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.LazyMap`2.CurrentValues">
      <summary>
            Gets the collection of values currently in the dictionary.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.LazyMap`2.CurrentItems">
      <summary>
            Gets the collection of KeyValuePair&lt;T1,T2&gt; entries currently in the dictionary.
            </summary>
    </member>
    <member name="T:NationalInstruments.WaveformScaleMode">
      <summary>
            Represents a class used to scale waveform data.
            </summary>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.#ctor">
      <summary>
            Initializes a new instance of the WaveformScaleMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData(NationalInstruments.AnalogWaveform)">
      <summary>
            Returns the scaled analog waveform data.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <returns>
            The scaled data.
            </returns>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0})">
      <summary>
            Returns the scaled analog waveform data.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <typeparam name="TData">
            The underlying type of waveform (parameter). The following data types are supported by TData (generic type parameter):
            Byte,
            SByte,
            Decimal,
            Single,
            Double,
            Int16,
            UInt16,
            Int32,
            UInt32,
            Int64, and
            UInt64.
            			</typeparam>
      <returns>
            The scaled data.
            </returns>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData(NationalInstruments.AnalogWaveform,System.Int32,System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the specified sample index and count.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <param name="sampleIndex">
            The start index.
            </param>
      <param name="count">
            The amount of scaled data to return.
            </param>
      <returns>
            The scaled data.
            </returns>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0},System.Int32,System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the specified sample index and count.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <param name="sampleIndex">
            The start index.
            </param>
      <param name="count">
            The amount of scaled data to return.
            </param>
      <typeparam name="TData">
            The underlying type of waveform (parameter). The following data types are supported by TData (generic type parameter):
            Byte,
            SByte,
            Decimal,
            Single,
            Double,
            Int16,
            UInt16,
            Int32,
            UInt32,
            Int64, and
            UInt64.
            			</typeparam>
      <returns>
            The scaled data.
            </returns>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData(NationalInstruments.AnalogWaveform,System.Int32,System.Int32,System.Double[],System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the specified sample index, count, and array index.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The amount of scaled data to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the scaled data into.
            </param>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0},System.Int32,System.Int32,System.Double[],System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the specified sample index, count, and array index.
            </summary>
      <typeparam name="TData">
            The underlying type of waveform (parameter). The following data types are supported by TData (generic type parameter):
            Byte,
            SByte,
            Decimal,
            Single,
            Double,
            Int16,
            UInt16,
            Int32,
            UInt32,
            Int64, and
            UInt64.
            			</typeparam>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The amount of scaled data to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the scaled data into.
            </param>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.TransformData(System.Double[])">
      <summary>
            Returns the transformed data.
            </summary>
      <param name="data">
            The raw, untransformed data.
            </param>
      <returns>
            The transformed data.
            </returns>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.CreateLinearMode(System.Double,System.Double)">
      <summary>
            Creates a WaveformScaleMode that scales data linearly.
            </summary>
      <param name="gain">
            The gain of the linear scale.
            </param>
      <param name="offset">
            The offset of the linear scale.
            </param>
      <returns>
            A WaveformScaleMode that scales data linearly.
            </returns>
    </member>
    <member name="P:NationalInstruments.WaveformScaleMode.None">
      <summary>
            Gets a WaveformScaleMode that does not scale data.
            </summary>
    </member>
    <member name="T:NationalInstruments.PrecisionDateTime">
      <summary>
            Represents an instance in time, typically expressed as a date and time of day.
            This type has higher precision than DateTime.
            </summary>
    </member>
    <member name="F:NationalInstruments.PrecisionDateTime.SecondsPerFractionalTicks">
      <summary>
            Represents the number of seconds for each fractional second tick. This field is read-only.
            </summary>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Int64,System.UInt64)">
      <summary>
            Initializes a new instance of the PrecisionDateTime
            structure with the specified whole seconds and fractional second ticks.
            </summary>
      <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 0001.
            This value cannot be less than zero.
            </param>
      <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed since midnight, January 1, 0001. This value cannot be
            less than zero.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">wholeSeconds (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Int64,System.UInt64,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the PrecisionDateTime
            structure with the specified whole seconds and fractional second ticks, expressed as 
            either a local time, a UTC time, or neither.
            </summary>
      <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 0001.
            This value cannot be less than zero.
            </param>
      <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed since midnight, January 1, 0001. This value cannot be
            less than zero.
            </param>
      <param name="kind">
            A DateTimeKind value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">wholeSeconds (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">kind (parameter) is not a valid DateTimeKind value.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Int64,System.Int64)">
      <summary>
            Initializes a new instance of the PrecisionDateTime
            structure with the specified whole seconds and fractional second ticks.
            </summary>
      <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 0001.
            This value cannot be less than zero.
            </param>
      <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed since midnight, January 1, 0001. This value cannot be
            less than zero.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">wholeSeconds (parameter) is less than zero.
            
            -or-
            fractionalSecondTicks (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Int64,System.Int64,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the PrecisionDateTime
            structure with the specified whole seconds and fractional second ticks, expressed as 
            either a local time, a UTC time, or neither.
            </summary>
      <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 0001.
            This value cannot be less than zero.
            </param>
      <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed since midnight, January 1, 0001. This value cannot be
            less than zero.
            </param>
      <param name="kind">
            A DateTimeKind value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">wholeSeconds (parameter) is less than zero.
            
            -or-
            fractionalSecondTicks (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">kind (parameter) is not a valid DateTimeKind value.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the PrecisionDateTime
            structure to the specified date and time represented by a
            DateTime object.
            </summary>
      <param name="dateTime">
            A DateTime which represents the date and time information to
            initialize the PrecisionDateTime.
            </param>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the PrecisionDateTime 
            structure with the specified number of seconds.
            </summary>
      <param name="seconds">
            The number of seconds that have elapsed since midnight, January 1, 0001. This value 
            must be less than or equal to MaxValue and cannot be less
            than zero.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">seconds (parameter) is PositiveInfinity or
            NegativeInfinity.
            seconds (parameter) is NaN.
            seconds (parameter) is greater than MaxValue or
            less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Double,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the PrecisionDateTime 
            structure with the specified number of seconds expressed as either a local time,
            a UTC time, or neither.
            </summary>
      <param name="seconds">
            The number of seconds that have elapsed since midnight, January 1, 0001. This value 
            must be less than or equal to MaxValue and cannot be less
            than zero.
            </param>
      <param name="kind">
            A DateTimeKind value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">seconds (parameter) is PositiveInfinity or
            NegativeInfinity.
            seconds (parameter) is NaN.
            seconds (parameter) is greater than MaxValue or
            less than zero.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">kind (parameter) is not a valid DateTimeKind value.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.FromLabViewTime(System.Int64,System.UInt64)">
      <summary>
            Converts the whole seconds and fractional second ticks of a LabVIEW time 
            to an equivalent local time.
            </summary>
      <param name="wholeSeconds">
            The number of whole seconds represented by the LabVIEW time.
            </param>
      <param name="fractionalSecondTicks">
            The number of 2^(-64) seconds after the whole seconds represented by the LabVIEW time.
            </param>
      <returns>
            A PrecisionDateTime that represents a local
            time that is equivalent to the date and time represented by the LabVIEW whole 
            seconds and fractional second ticks.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.FromLabViewTime(System.Int64,System.UInt64,System.DateTimeKind)">
      <summary>
            Converts the whole seconds and fractional second ticks of a LabVIEW time 
            to an equivalent local time, UTC time, or neither.
            </summary>
      <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
      <param name="fractionalSecondTicks">
            The number of 2^(-64) seconds after the whole seconds that have elapsed since midnight, January 1, 1904.
            This value cannot be less than zero.
            </param>
      <param name="kind">
            A DateTimeKind value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
      <returns>
            A PrecisionDateTime that is
            equivalent to the date and time specified by wholeSeconds (parameter) and
            fractionalSecondTicks (parameter) and which is expressed as either a 
            local time, a UTC time, or neither.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">fractionalSecondTicks (parameter) is less than zero.
            
            -or-
            
            The resulting PrecisionDateTime is less than
            MinValue or greater than
            MaxValue.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">kind (parameter) is not a valid DateTimeKind value.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.FromLabViewTime(System.Int64,System.Int64)">
      <summary>
            Converts the whole seconds and fractional second ticks of a LabVIEW time 
            to an equivalent local time.
            </summary>
      <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
      <param name="fractionalSecondTicks">
            The number of 2^(-64) seconds after the whole seconds that have elapsed since midnight, January 1, 1904.
            This value cannot be less than zero.
            </param>
      <returns>
            A PrecisionDateTime that represents a local
            time that is equivalent to the date and time represented by the LabVIEW whole 
            seconds and fractional second ticks.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">fractionalSecondTicks (parameter) is less than zero.
            
            -or-
            
            The resulting PrecisionDateTime is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.FromLabViewTime(System.Int64,System.Int64,System.DateTimeKind)">
      <summary>
            Converts the whole seconds and fractional second ticks of a LabVIEW time 
            to an equivalent local time, UTC time, or neither.
            </summary>
      <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
      <param name="fractionalSecondTicks">
            The number of 2^(-64) seconds after the whole seconds that have elapsed since midnight, January 1, 1904.
            This value cannot be less than zero.
            </param>
      <param name="kind">
            A DateTimeKind value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
      <returns>
            A PrecisionDateTime that is
            equivalent to the date and time specified by wholeSeconds (parameter) and
            fractionalSecondTicks (parameter) and which is expressed as either a 
            local time, a UTC time, or neither.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">fractionalSecondTicks (parameter) is less than zero.
            
            -or-
            
            The resulting PrecisionDateTime is less than
            MinValue or greater than
            MaxValue.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">kind (parameter) is not a valid DateTimeKind value.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.FromFileTime(System.Int64)">
      <summary>
            Converts the specified Windows file time to an equivalent local time.
            </summary>
      <param name="fileTime">
            A Windows file time expressed in ticks.
            </param>
      <returns>
            A PrecisionDateTime that represents a local
            time equivalent to the date and time represented by the fileTime (parameter)
            parameter.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">fileTime (parameter) represents a time less than
            MinValue or greater
            than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.FromFileTime(System.Int64,System.DateTimeKind)">
      <summary>
            Converts the specified Windows file time to an equivalent local time, UTC time, 
            or neither.
            </summary>
      <param name="fileTime">
            A Windows file time expressed in ticks.
            </param>
      <param name="kind">
            A DateTimeKind value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
      <returns>
            A PrecisionDateTime that is
            equivalent to the date and time specified by fileTime (parameter) and
            which is expressed as either a local time, a UTC time, or neither.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">fileTime (parameter) represents a time less than
            MinValue or greater
            than MaxValue.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">kind (parameter) is not a valid DateTimeKind value.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.FromCTime(System.Int64)">
      <summary>
            Converts the specified ANSI C time to an equivalent local time.
            </summary>
      <param name="seconds">
            The number of seconds that have elapsed since midnight, January 1, 1970.
            </param>
      <returns>
            A PrecisionDateTime that represents a local time specified
            by seconds (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">seconds (parameter) represents a time less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.FromCTime(System.Int64,System.DateTimeKind)">
      <summary>
            Converts the specified ANSI C time to the equivalent local time,
            UTC time, or neither.
            </summary>
      <param name="seconds">
            The number of seconds that have elapsed since midnight, January 1, 1970.
            </param>
      <param name="kind">
            A DateTimeKind value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
      <returns>
            A PrecisionDateTime that is
            equivalent to the date and time specified by seconds (parameter) and
            which is expressed as either a local time, a UTC time, or neither.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">seconds (parameter) represents a time less than
            MinValue or greater than
            MaxValue.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">kind (parameter) is not a valid DateTimeKind value.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.FromDateTime(System.DateTime)">
      <summary>
            Returns a new PrecisionDateTime instance that
            represents the date and time specified by a DateTime object.
            </summary>
      <param name="dateTime">
            A DateTime which represents the date and time information to
            initialize the new PrecisionDateTime instance.
            </param>
      <returns>
            A PrecisionDateTime that represents the
            date and time specified by dateTime (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToLabViewTime(System.Int64@,System.Int64@)">
      <summary>
            Converts the whole seconds and fractional second ticks of the PrecisionDateTime 
            to an equivalent LabVIEW time.
            </summary>
      <param name="wholeSeconds">
            Upon return, contains the number of whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
      <param name="fractionalSecondTicks">
            Upon return, contains the number of 2^(-64) seconds after the whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting wholeSeconds (parameter) value is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToLabViewTime(System.Int64@,System.UInt64@)">
      <summary>
            Converts the whole seconds and fractional second ticks of the PrecisionDateTime 
            to an equivalent LabVIEW time.
            </summary>
      <param name="wholeSeconds">
            Upon return, contains the number of whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
      <param name="fractionalSecondTicks">
            Upon return, contains the number of 2^(-64) seconds after the whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting wholeSeconds (parameter) value is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToFileTime">
      <summary>
            Converts the PrecisionDateTime to an equivalent local Windows file time.
            </summary>
      <returns>
            An Int64 that represents a Windows file time expressed in ticks.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            	The resulting number of ticks is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToCTime">
      <summary>
            Converts the PrecisionDateTime to an equivalent ANSI C time.
            </summary>
      <returns>
            An Int64 that represents the number of seconds that have elapsed since midnight,
            January 1, 1970.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            	The resulting number of seconds is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToDateTime">
      <summary>
            Converts the current PrecisionDateTime to a
            DateTime object.
            </summary>
      <returns>
            A DateTime object which represents the date and time of 
            the current PrecisionDateTime instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToLocalTime">
      <summary>
            Converts the value of the current PrecisionDateTime
            object to local time.
            </summary>
      <returns>
            A PrecisionDateTime object whose 
            Kind property is
            Local and whose value is the local
            time equivalent to the value of the current
            PrecisionDateTime object, or
            MaxValue if the
            converted value is too large to be represented by a
            PrecisionDateTime object, or
            MinValue if the
            converted value is too small to be represented as a
            PrecisionDateTime object.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToUniversalTime">
      <summary>
            Converts the value of the current PrecisionDateTime
            object to Coordinated Universal Time (UTC).
            </summary>
      <returns>
            A PrecisionDateTime object whose 
            Kind property is
            Utc and whose value is the UTC
            equivalent to the value of the current
            PrecisionDateTime object, or
            MaxValue if the
            converted value is too large to be represented by a
            PrecisionDateTime object, or
            MinValue if the
            converted value is too small to be represented as a
            PrecisionDateTime object.
            </returns>
    </member>
    <member name="F:NationalInstruments.PrecisionDateTime.MaxValue">
      <summary>
            Represents the largest possible value of PrecisionDateTime. This field is read-only.
            </summary>
    </member>
    <member name="F:NationalInstruments.PrecisionDateTime.MinValue">
      <summary>
            Represents the smallest possible value of PrecisionDateTime. This field is read-only.
            </summary>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>
            Returns the number of days in the specified month and year.
            </summary>
      <param name="year">
            The year.
            </param>
      <param name="month">
            The month (a number ranging from 1 to 12).
            </param>
      <returns>
            The number of days in month (parameter) for the specified year (parameter). For example, if
            month (parameter) equals 2 for February, the return value is 28 or 29 depending upon whether
            year (parameter) is a leap year.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">month (parameter) is less than 1 or greater than 12.-or-year (parameter) is less than 1 or greater than 9999.</exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.AddYears(System.Int32)">
      <summary>
            Adds the specified number of years  to the value of this instance.
            </summary>
      <param name="value">
            A number of years. The value (parameter) parameter can be negative or positive.
            </param>
      <returns>
            A PrecisionDateTime whose value is the sum of the date and time represented by this instance and 
            the number of years represented by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than MinValue
            or greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.AddMonths(System.Int32)">
      <summary>
            Adds the specified number of months to the value of this instance.
            </summary>
      <param name="value">
            A number of months. The value (parameter) parameter can be negative or positive.
            </param>
      <returns>
            A PrecisionDateTime whose value is the sum of the date and time represented by this instance and value (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than MinValue
            or greater than MaxValue.
            -or-value (parameter) is less than -120,000 or greater than 120,000.</exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.AddDays(System.Double)">
      <summary>
            Adds the specified number of days to the value of this instance.
            </summary>
      <param name="value">
            A number of whole and fractional days.  The value (parameter) parameter can be negative or positive.
            </param>
      <returns>
            A PrecisionDateTime whose value is the sum of the date and time represented by this
            instance and the number of days represented by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than MinValue
            or greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.AddHours(System.Double)">
      <summary>
            Adds the specified number of hours to the value of this instance.
            </summary>
      <param name="value">
            A number of whole and fractional hours. The value (parameter) parameter can be negative or positive.
            </param>
      <returns>
            A PrecisionDateTime whose value is the sum of the date and time represented by this instance and the number of hours represented by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than MinValue
            or greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.AddMinutes(System.Double)">
      <summary>
            Adds the specified number of minutes to the value of this instance.
            </summary>
      <param name="value">
            A number of whole and fractional minutes. The value (parameter) parameter can be negative or positive.
            </param>
      <returns>
            A PrecisionDateTime whose value is the sum of the date and time represented by this instance and the number of minutes represented by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than MinValue
            or greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.AddSeconds(System.Double)">
      <summary>
            Adds the specified number of seconds  to the value of this instance.
            </summary>
      <param name="value">
            A number of whole and fractional seconds. The value (parameter) parameter can be negative or positive.
            </param>
      <returns>
            A PrecisionDateTime whose value is the sum of the date and time represented by this instance 
            and the number of seconds represented by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than MinValue
            or greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.AddMilliseconds(System.Double)">
      <summary>
            Adds the specified number of milliseconds to the value of this instance.
            </summary>
      <param name="value">
            A number of whole and fractional milliseconds. The value (parameter) parameter can be negative or positive.
            </param>
      <returns>
            A PrecisionDateTime whose value is the sum of the date and time represented by
            this instance and the number of milliseconds represented by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than MinValue
            or greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.SpecifyKind(NationalInstruments.PrecisionDateTime,System.DateTimeKind)">
      <summary>
            Creates a new PrecisionDateTime object that
            represents the same time as the specified PrecisionDateTime,
            but is designated in either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified
            DateTimeKind value.
            </summary>
      <param name="value">
            A PrecisionDateTime object.
            </param>
      <param name="kind">
            The DateTimeKind value you would like to designate for the new
            PrecisionDateTime.
            </param>
      <returns>
            A new PrecisionDateTime object consisting of the
            same time represented by the value (parameter) parameter and the DateTimeKind
            value specified by the kind (parameter) parameter.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">
            An object to compare to this instance.
            </param>
      <returns>true if obj (parameter) is an instance of PrecisionDateTime
            and equals the value of this instance; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.Equals(NationalInstruments.PrecisionDateTime)">
      <summary>
            Returns a value indicating whether this instance is equal to the specified PrecisionDateTime
            instance.
            </summary>
      <param name="other">
            A PrecisionDateTime instance to compare to this instance.
            </param>
      <returns>true if the other (parameter) parameter equals the value of this instance; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.Equals(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
      <summary>
            Returns a value indicating whether two instances of PrecisionDateTime are equal.
            </summary>
      <param name="t1">
            the first PrecisionDateTime instance.
            </param>
      <param name="t2">
            The second PrecisionDateTime instance.
            </param>
      <returns>true if the two PrecisionDateTime values are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.GetTypeCode">
      <summary>
            Returns the TypeCode for value type PrecisionDateTime.
            </summary>
      <returns>
            The enumerated constant, DateTime.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.Add(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Adds the value of the specified PrecisionTimeSpan to the value of this instance.
            </summary>
      <param name="value">
            A PrecisionTimeSpan that contains the interval to add.
            </param>
      <returns>
            A PrecisionDateTime whose value is the sum of the date and time 
            represented by this instance and the time interval represented by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than 
            MinValue
            or greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.Subtract(NationalInstruments.PrecisionDateTime)">
      <summary>
            Subtracts the specified date and time from this instance.
            </summary>
      <param name="value">
            An instance of PrecisionDateTime.
            </param>
      <returns>
            A PrecisionTimeSpan interval equal to the date and time
            represented by this instance minus the date and time represented by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The result is less than MinValue or
            greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.Subtract(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Subtracts the specified duration from this instance.
            </summary>
      <param name="value">
            An instance of PrecisionTimeSpan.
            </param>
      <returns>
            A PrecisionDateTime equal to the date and time
            represented by this instance minus the time interval represented by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The result is less than MinValue or
            greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.op_Addition(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Adds a specified time interval to a specified date and time, yielding a new date and time.
            </summary>
      <param name="precisionDateTime">
            A PrecisionDateTime.
            </param>
      <param name="precisionTimeSpan">
            A PrecisionTimeSpan.
            </param>
      <returns>
            A PrecisionDateTime that is the sum of the values
            precisionDateTime (parameter) and precisionTimeSpan (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.op_Subtraction(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
      <summary>
            Subtracts a specified date and time from another specified date and time, yielding a time interval.
            </summary>
      <param name="precisionDateTime1">
            The first PrecisionDateTime.
            </param>
      <param name="precisionDateTime2">
            The second PrecisionDateTime.
            </param>
      <returns>
            A PrecisionTimeSpan that is the time interval between
            precisionDateTime1 (parameter) and precisionDateTime2 (parameter); that is, 
            precisionDateTime1 (parameter) minus precisionDateTime2 (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionTimeSpan is less than 
            MinValue or greater than 
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.op_Subtraction(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Subtracts a specified time interval from a specified date and time, yielding a new date and time.
            </summary>
      <param name="precisionDateTime">
            A PrecisionDateTime.
            </param>
      <param name="precisionTimeSpan">
            A PrecisionTimeSpan.
            </param>
      <returns>
            A PrecisionDateTime whose value is the value of 
            precisionDateTime (parameter) minus the value of precisionTimeSpan (parameter).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting PrecisionDateTime is less than
            MinValue or greater than
            MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.op_Equality(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
      <summary>
            Determines whether two specified instances of PrecisionDateTime 
            are equal.
            </summary>
      <param name="precisionDateTime1">
            The first PrecisionDateTime.
            </param>
      <param name="precisionDateTime2">
            The second PrecisionDateTime.
            </param>
      <returns>true if precisionDateTime1 (parameter) and precisionDateTime2 (parameter)
            represent the same date and time; otherwise false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.op_GreaterThan(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
      <summary>
            Determines whether one specified PrecisionDateTime is greater than
            another specified PrecisionDateTime.
            </summary>
      <param name="precisionDateTime1">
            The first PrecisionDateTime.
            </param>
      <param name="precisionDateTime2">
            The second PrecisionDateTime.
            </param>
      <returns>true if precisionDateTime1 (parameter) is greater than precisionDateTime2 (parameter);
            otherwise false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.op_GreaterThanOrEqual(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
      <summary>
            Determines whether one specified PrecisionDateTime is greater than
            or equal to another specified PrecisionDateTime.
            </summary>
      <param name="precisionDateTime1">
            The first PrecisionDateTime.
            </param>
      <param name="precisionDateTime2">
            The second PrecisionDateTime.
            </param>
      <returns>true if precisionDateTime1 (parameter) is greater than or equal to precisionDateTime2 (parameter);
            otherwise false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.op_Inequality(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
      <summary>
            Determines whether two specified instances of PrecisionDateTime are not equal.
            </summary>
      <param name="precisionDateTime1">
            The first PrecisionDateTime.
            </param>
      <param name="precisionDateTime2">
            The second PrecisionDateTime.
            </param>
      <returns>true if precisionDateTime1 (parameter) and precisionDateTime2 (parameter) do not represent the same
            date and time; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.op_LessThan(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
      <summary>
            Determines whether one specified PrecisionDateTime is less than
            another specified PrecisionDateTime.
            </summary>
      <param name="precisionDateTime1">
            The first PrecisionDateTime.
            </param>
      <param name="precisionDateTime2">
            The second PrecisionDateTime.
            </param>
      <returns>true if precisionDateTime1 (parameter) is less than 
            precisionDateTime2 (parameter); otherwise false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.op_LessThanOrEqual(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
      <summary>
            Determines whether one specified PrecisionDateTime is less than
            or equal to another specified PrecisionDateTime.
            </summary>
      <param name="precisionDateTime1">
            The first PrecisionDateTime.
            </param>
      <param name="precisionDateTime2">
            The second PrecisionDateTime.
            </param>
      <returns>true if precisionDateTime1 (parameter) is less than or equal to precisionDateTime2 (parameter);
            otherwise false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.Compare(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
      <summary>
            Compares two instances of PrecisionDateTime and returns
            an indication of their relative values.
            </summary>
      <param name="precisionDateTime1">
            The first PrecisionDateTime.
            </param>
      <param name="precisionDateTime2">
            The second PrecisionDateTime.
            </param>
      <returns>
            A signed number indicating the relative values of precisionDateTime1 (parameter) and precisionDateTime2 (parameter).
            Value TypeCondition
            Less than zero
            precisionDateTime1 (parameter) is less than precisionDateTime2 (parameter).
            
            Zero
            precisionDateTime1 (parameter) equals precisionDateTime2 (parameter).
            
            Greater than zero
            precisionDateTime1 (parameter) is greater than precisionDateTime2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="obj">
            A boxed PrecisionDateTime object to compare, or null.
            </param>
      <returns>
            A signed number indicating the relative values of this instance and obj (parameter).
            ValueDescription
            Less than zero
            
            This instance is less than obj (parameter).
            
            Zero
            
            This instance is equal to obj (parameter).
            
            Greater than zero
            
            This instance is greater than obj (parameter), or obj (parameter) is null.
            </returns>
      <exception cref="T:System.ArgumentException">obj (parameter) is not a PrecisionDateTime.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.CompareTo(NationalInstruments.PrecisionDateTime)">
      <summary>
            Compares this instance to a specified PrecisionDateTime object and
            returns an indication of their relative values.
            </summary>
      <param name="other">
            A PrecisionDateTime object to compare.
            </param>
      <returns>
            A signed number indicating the relative values of this instance and the other (parameter) parameter.
            ValueDescription
            Less than zero
            
            This instance is less than other (parameter).
            
            Zero
            
            This instance is equal to other (parameter).
            
            Greater than zero
            
            This instance is greater than other (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats">
      <summary>
            Converts the value of this instance to all the string representations supported by the standard
            DateTime format specifiers.
            </summary>
      <returns>
            A string array where each element is the representation of the value of this instance formatted with one of the standard 
            DateTime formatting specifiers.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats(System.Char)">
      <summary>
            Converts the value of this instance to all the string representations supported by the specified
            standard DateTime format specifier.
            </summary>
      <param name="format">
            A unicode character containing a format specifier.
            </param>
      <returns>
            A string array where each element is the representation of the value of this instance formatted with the 
            format (parameter) standard DateTime formatting specifier.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to all the string representations supported by the standard 
            DateTime format specifier and the specified culture-specific formatting
            information. 
            </summary>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about this instance.
            </param>
      <returns>
            A string array where each element is the representation of the value of this instance formatted with one of the
            standard DateTime formatting specifiers.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>
            Converts the value of this instance to all the string representations supported by the standard 
            DateTime format specifier and culture-specific formatting
            information. 
            </summary>
      <param name="format">
            A Unicode character containing a format specifier.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about this instance.
            </param>
      <returns>
            A string array where each element is the representation of the value of this instance formatted with one of the
            standard DateTime formatting specifiers.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.Parse(System.String)">
      <summary>
            Converts the specified string representation of a date and time to its PrecisionDateTime
            equivalent.
            </summary>
      <param name="dateTime">
            A string containing a date and time to convert.
            </param>
      <returns>
            A PrecisionDateTime equivalent to the date and time contained in 
            dateTime (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">dateTime (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">dateTime (parameter) does not contain a valid string representation of a date and time.
            -or-dateTime (parameter) represents a date and time greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the specified string representation of a date and time to its 
            PrecisionDateTime equivalent using the specified
            culture-specific format information.
            </summary>
      <param name="dateTime">
            A string containing a date and time to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific format information about dateTime (parameter).
            </param>
      <returns>
            A PrecisionDateTime equivalent to the date and time contained in
            dateTime (parameter) as specified by provider (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">dateTime (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">dateTime (parameter) does not contain a valid string representation of a date and time.
            -or-dateTime (parameter) represents a date and time greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
            Converts the specified string representation of a date and time to its
            PrecisionDateTime equivalent using the specified
            culture-specific format information and formatting style.
            </summary>
      <param name="dateTime">
            A string containing and date and time to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information
            about dateTime (parameter).
            </param>
      <param name="styles">
            A bitwise combination of DateTimeStyles values that indicates the
            permitted format of dateTime (parameter). A typical value to specify is None.
            </param>
      <returns>
            A PrecisionDateTime equivalent to the date and time contained in 
            dateTime (parameter) as specified by provider (parameter) and styles (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">dateTime (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">dateTime (parameter) does not contain a valid string representation of a date and time.
            -or-dateTime (parameter) represents a date and time greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">styles (parameter) contains an invalid combination of
            DateTimeStyles values. For example, both
            AssumeLocal and
            AssumeUniversal.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>
            Converts the specified string representation of a date and time to its
            PrecisionDateTime equivalent using the specified format
            and culture-specific format information. The format of the string representation must
            match the specified format exactly.
            </summary>
      <param name="dateTime">
            A string containing a date and time to convert.
            </param>
      <param name="format">
            The expected format of dateTime (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific format
            information about dateTime (parameter).
            </param>
      <returns>
            A PrecisionDateTime equivalent to the date and time
            contained in dateTime (parameter) as specified by format (parameter) and
            provider (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">dateTime (parameter) or format (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">dateTime (parameter) or format (parameter) is an empty string.-ordateTime (parameter) does not contain a date and time that corresponds to the
            pattern specified in format (parameter).-or-dateTime (parameter) represents a date and time greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
            Converts the specified string representation of a date and time to its PrecisionDateTime
            equivalent using the specified format, culture-specific format information, and style. The format
            of the string representation must match the specified format exactly.
            </summary>
      <param name="dateTime">
            A string containing a date and time to convert.
            </param>
      <param name="format">
            The expected format of dateTime (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about dateTime (parameter).
            </param>
      <param name="style">
            A bitwise combination of DateTimeStyles values that indicates the permitted
            format of dateTime (parameter). A typical value to specify is None.
            </param>
      <returns>
            A PrecisionDateTime equivalent to the date and time contained in
            dateTime (parameter) as specified by format (parameter), provider (parameter),
            and style (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">dateTime (parameter) or format (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">dateTime (parameter) or format (parameter) is an empty string.-ordateTime (parameter) does not contain a date and time that corresponds to the pattern
            specified in format (parameter).-or-dateTime (parameter) represents a date and time greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">style (parameter) contains an invalid combination of DateTimeStyles
            values. For example, both AssumeLocal and
            AssumeUniversal.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
            Converts the specified string representation of a date and time to its PrecisionDateTime
            equivalent using the specified array of formats, culture-specific format information, and style. The format
            of the string representation must match at least one of the specified formats exactly.
            </summary>
      <param name="dateTime">
            A string containing one or more dates and times to convert.
            </param>
      <param name="formats">
            An array of expected formats of dateTime (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about dateTime (parameter).
            </param>
      <param name="style">
            A bitwise combination of DateTimeStyles values that indicates the permitted
            format of dateTime (parameter). A typical value to specify is None.
            </param>
      <returns>
            A PrecisionDateTime equivalent to the date and time contained in
            dateTime (parameter) as specified by formats (parameter), provider (parameter),
            and style (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">dateTime (parameter) or formats (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">dateTime (parameter) is an empty string.-oran element of formats (parameter) is an empty string.-ordateTime (parameter) does not contain a date and time that corresponds to any element of
            specified in formats (parameter).-or-dateTime (parameter) represents a date and time greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">style (parameter) contains an invalid combination of DateTimeStyles
            values. For example, both AssumeLocal and
            AssumeUniversal.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.TryParse(System.String,NationalInstruments.PrecisionDateTime@)">
      <summary>
            Converts the specified string representation of a date and time to its
            PrecisionDateTime equivalent.
            </summary>
      <param name="dateTime">
            A string containing a date and time to convert.
            </param>
      <param name="result">
            When this method returns, contains the PrecisionDateTime
            value equivalent to the date and time contained in dateTime (parameter), if the
            conversion succeeded, or MinValue
            if the conversion failed. The conversion fails if the dateTime (parameter) parameter
            is null, does not contain a valid string representation of a
            date and time, or contains a string representation of a date and time greater than
            MaxValue. This parameter is passed uninitialized.
            </param>
      <returns>true if the dateTime (parameter) parameter was converted
            successfully; otherwise false.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,NationalInstruments.PrecisionDateTime@)">
      <summary>
            Converts the specified string representation of a date and time to its
            PrecisionDateTime equivalent using
            the specified culture-specific format information and formatting style.
            </summary>
      <param name="dateTime">
            A string containing a date and time to convert.
            </param>
      <param name="provider">
            An IFormatProvider object that supplies culture-specific formatting
            information about dateTime (parameter).
            </param>
      <param name="styles">
            A bitwise combination of DateTimeStyles values that
            indicates the permitted format of dateTime (parameter). A typical value to specify is
            None.
            </param>
      <param name="result">
            When this method returns, it contains the PrecisionDateTime
            value equivalent to the date and time contained in dateTime (parameter), if the
            conversion succeeded, or MinValue
            if the conversion failed. The conversion fails if the dateTime (parameter) parameter
            is null, does not contain a valid string representation of a
            date and time, or contains a string representation of a date and time greater than
            MaxValue. This parameter is passed uninitialized.
            </param>
      <returns>true if the dateTime (parameter) parameter was converted
            successfully; otherwise false.
            </returns>
      <exception cref="T:System.ArgumentException">styles (parameter) is not a valid DateTimeStyles
            value.
            
            -or-
            styles (parameter) contains an invalid combination of 
            DateTimeStyles values (for example, both
            AssumeLocal and
            AssumeUniversal.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,NationalInstruments.PrecisionDateTime@)">
      <summary>
            Converts the specified string representation of a date and time to its
            PrecisionDateTime equivalent using the
            specified format, culture-specific format information, and style. The
            format of the string representation must match the specified format exactly.
            </summary>
      <param name="dateTime">
            A string containing a date and time to convert.
            </param>
      <param name="format">
            The expected format of dateTime (parameter).
            </param>
      <param name="provider">
            An IFormatProvider object that supplies culture-specific 
            formatting information about dateTime (parameter).
            </param>
      <param name="styles">
            A bitwise combination of one or more DateTimeStyles
            values that indicate the permitted format of dateTime (parameter).
            </param>
      <param name="result">
            When this method returns, contains the PrecisionDateTime
            value equivalent to the date and time contained in dateTime (parameter), if the
            conversion succeeded, or MinValue
            if the conversion failed. The conversion fails if either the dateTime (parameter) or
            format (parameter) parameter is null, is an empty string,
            does not contain a date and time that correspond to the pattern specified in
            format (parameter), or contains a string representation of a date and time greater than
            MaxValue. This parameter is passed uninitialized.
            </param>
      <returns>true if dateTime (parameter) was converted successfully;
            otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentException">styles (parameter) is not a valid DateTimeStyles
            value.
            	
            -or-
            styles (parameter) contains an invalid combination of DateTimeStyles
            values (for example, both AssumeLocal
            and AssumeUniversal).
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,NationalInstruments.PrecisionDateTime@)">
      <summary>
            Converts the specified string representation of a date and time to its
            PrecisionDateTime equivalent using the
            specified array of formats, culture-specific format information, and style. The
            format of the string representation must match at least one of the specified 
            formats exactly.
            </summary>
      <param name="dateTime">
            A string containing one or more dates and times to convert.
            </param>
      <param name="formats">
            An array of expected formats of dateTime (parameter).
            </param>
      <param name="provider">
            An IFormatProvider object that supplies culture-specific 
            formatting information about dateTime (parameter).
            </param>
      <param name="styles">
            A bitwise combination of one or more DateTimeStyles
            values that indicates the permitted format of dateTime (parameter).
            </param>
      <param name="result">
            When this method returns, contains the PrecisionDateTime
            value equivalent to the date and time contained in dateTime (parameter), if the
            conversion succeeded, or MinValue
            if the conversion failed. The conversion fails if dateTime (parameter) or
            formats (parameter) is null, dateTime (parameter) or
            an element of formats (parameter) is an empty string, the format of
            dateTime (parameter) is not exactly as specified by at least one of the format
            patterns in formats (parameter), or dateTime (parameter) contains a string representation of a date and time greater than
            MaxValue. This parameter is passed uninitialized.
            </param>
      <returns>true if dateTime (parameter) was converted successfully;
            otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentException">styles (parameter) is not a valid DateTimeStyles
            value.
            	
            -or-
            styles (parameter) contains an invalid combination of DateTimeStyles
            values (for example, both AssumeLocal
            and AssumeUniversal).
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToLongDateString">
      <summary>
            Converts the value of this instance to its equivalent long date string representation.
            </summary>
      <returns>
            A string containing the name of the day of the week, the name of the month, the numeric
            day of the month, and the year equivalent to the date value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToLongTimeString">
      <summary>
            Converts the value of this instance to its equivalent long time  string representation.
            </summary>
      <returns>
            A string containing the hours, minutes, and seconds equivalent to the time value
            of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToShortDateString">
      <summary>
            Converts the value of this instance to its equivalent short date string representation.
            </summary>
      <returns>
            A string containing the numeric month, the numeric day of the month, and the year
            equivalent to the date value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToShortTimeString">
      <summary>
            Converts the value of this instance to its equivalent short time  string representation.
            </summary>
      <returns>
            A string containing the hours, minutes, and seconds equivalent to the time value
            of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToString">
      <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
      <returns>
            A string representation of the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToString(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified culture-specific format information.
            </summary>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information.
            </param>
      <returns>
            A string representation of the value of this instance as specified by provider (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToString(System.String)">
      <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified format.
            </summary>
      <param name="format">
            A format string.
            </param>
      <returns>
            A string representation of the value of this instance as specified by format (parameter).
            </returns>
      <exception cref="T:System.FormatException">
            The length of format (parameter) is 1, and it is not one of the format specifier characters
            defined for DateTimeFormatInfo.
            
            -or-
            format (parameter) does not contain a valid custom format pattern.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified format and culture-specific format information.
            </summary>
      <param name="format">
            A format string.
            </param>
      <param name="formatProvider">
            An IFormatProvider that supplies culture-specific formatting information.
            </param>
      <returns>
            A string representation of the value of this instance as specified by format (parameter)
            and formatProvider (parameter).
            </returns>
      <exception cref="T:System.FormatException">
            The length of format (parameter) is 1, and it is not one of the format specifier characters
            defined for DateTimeFormatInfo.
            
            -or-
            format (parameter) does not contain a valid custom format pattern.
            </exception>
    </member>
    <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
            Converts the current PrecisionDateTime to a DateTime
            instance.
            </summary>
      <param name="provider">
            An object that implements the IFormatProvider interface. (This parameter is
            not used; specify null.)
            </param>
      <returns>
            The current PrecisionDateTime converted to a DateTime
            object.
            </returns>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.WholeSeconds">
      <summary>
            Gets the date and time of this instance expressed as the total number of whole seconds.
            This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.FractionalSeconds">
      <summary>
            Gets the number of fractional seconds represented by the current 
            PrecisionDateTime instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks">
      <summary>
            Gets the number of fractional second ticks represented by the current 
            PrecisionDateTime instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Millisecond">
      <summary>
            Gets the millisecond component of the date represented by this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Second">
      <summary>
            Gets the seconds component of the date represented by this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Minute">
      <summary>
            Gets the minute component of the date represented by this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Hour">
      <summary>
            Gets the hour component of the day represented by this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Day">
      <summary>
            Gets the day of the month represented by this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Month">
      <summary>
            Gets the month component of the date represented by this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Year">
      <summary>
            Gets the year component of the date represented by this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Kind">
      <summary>
            Gets a value that indicates whether the time represented by this instance is based on local time,
            Coordinated Universal Time (UTC), or neither.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Date">
      <summary>
            Gets the date component of this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.TimeOfDay">
      <summary>
            Gets the time of day for this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.DayOfWeek">
      <summary>
            Gets the day of the week represented by this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.DayOfYear">
      <summary>
            Gets the day of the year represented by this instance. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Now">
      <summary>
            Gets a PrecisionDateTime object that is set to the current 
            date and time on this computer, expressed as the local time. This property is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.UtcNow">
      <summary>
            Gets a PrecisionDateTime object that is set to
            the current date and time on this computer, expressed as the Coordinated
            Universal Time (UTC).
            </summary>
    </member>
    <member name="P:NationalInstruments.PrecisionDateTime.Today">
      <summary>
            Gets the current date. This property is read-only.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalStateUtility">
      <summary>
            Provides helper methods related to digital states.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalStateUtility.Test(NationalInstruments.DigitalState,NationalInstruments.DigitalState)">
      <summary>
            Tests two digital states and returns whether the test failed.
            </summary>
      <param name="state1">
            The first DigitalState tested.
            </param>
      <param name="state2">
            The second DigitalState tested.
            </param>
      <returns>true if the test failed.
            </returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">state1 (parameter) is an invalid DigitalState value.
            
            -or-
            state2 (parameter) is an invalid DigitalState value.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalStateUtility.ToChar(NationalInstruments.DigitalState)">
      <summary>
            Returns a character representing the DigitalState.
            </summary>
      <param name="state">
            The DigitalState value.
            </param>
      <returns>
            A Char representing the DigitalState.
            </returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">state (parameter) is an invalid DigitalState value.
            </exception>
    </member>
    <member name="T:NationalInstruments.DigitalState">
      <summary>
            Specifies the different digital states that a digital signal can represent.
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.ForceDown">
      <summary>
            Force logic low. Drive to the low voltage level (VIL).
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.ForceUp">
      <summary>
            Force logic high. Drive to the high voltage level (VIH).
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.ForceOff">
      <summary>
            Force logic high impedance. Turn the driver off.
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.CompareLow">
      <summary>
            Compare logic low (edge). Compare for a voltage level lower than
            the low voltage threshold (VOL).
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.CompareHigh">
      <summary>
            Compare logic high (edge). Compare for a voltage level higher
            than the high voltage threshold (VOH).
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.CompareUnknown">
      <summary>
            Compare logic unknown. Don't compare.
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.CompareOff">
      <summary>
            Compare logic high impedance (edge). Compare for a voltage level
            between the low voltage threshold (VOL) and the high voltage threshold
            (VOH).
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.CompareValid">
      <summary>
            Compare logic valid level (edge). Compare for a 
            voltage level either lower than the low voltage threshold (VOL) or higher
            than the high voltage threshold (VOH).
            </summary>
    </member>
    <member name="T:NationalInstruments.AnalogWaveformSample`1">
      <summary>
            Represents a sample of an analog waveform.
            </summary>
      <typeparam name="TData">
            The type of the sample.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSample`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample`1.Owner">
      <summary>
            Gets the AnalogWaveform&lt;T&gt; that the sample came from.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample`1.Value">
      <summary>
            Gets or sets the value of the AnalogWaveformSample&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample`1.HasTimeStamp">
      <summary>
            Gets a value indicating if the analog sample has a time stamp.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample`1.TimeStamp">
      <summary>
            Gets the time at which the data was sampled.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample`1.PrecisionTimeStamp">
      <summary>
            Gets the time at which the data was sampled.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample`1.Index">
      <summary>
            Gets the index of the sample in the AnalogWaveformSampleCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.#ctor">
      <summary>
            Initializes a new instance of the CallbackManager class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.#ctor(System.ComponentModel.EventHandlerList)">
      <summary>
            Initializes a new instance of the CallbackManager class with the specified list of event handlers.
            </summary>
      <param name="events">
            The list of event handlers.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.Dispose">
      <summary>
            Releases all resources used by the CallbackManager object.
            </summary>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.AddEventHandler(System.Object,System.Delegate)">
      <summary>
            Adds an event handler for the specified event key.
            </summary>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <param name="value">
            The delegate to the method that handles the event.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>
            Removes an event handler for the specified event key.
            </summary>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <param name="value">
            The delegate to the method that handles the event.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.GetHandlerCount(System.Object)">
      <summary>
            Gets the number of event handlers installed for the specified event key.
            </summary>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <returns>
            The number of event handlers installed for the specified event key.
            </returns>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.InvokeAsyncCallback(System.ComponentModel.AsyncOperation,System.AsyncCallback,System.IAsyncResult)">
      <summary>
            Raises the asynchronous event through a synchronization context.
            </summary>
      <param name="operation">
            An AsyncOperation that provides the 
            SynchronizationContext that is used to invoke the event.
            </param>
      <param name="callback">
            A delegate to the method that raises the asynchronous event.
            </param>
      <param name="result">
            The result of the asynchronous operation.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.InvokeAsyncCallbackAsync(System.ComponentModel.AsyncOperation,System.AsyncCallback,System.IAsyncResult)">
      <summary>
            Asynchronously raises the asynchronous event through a synchronization context.
            </summary>
      <param name="operation">
            An AsyncOperation that provides the 
            SynchronizationContext that is used to invoke the event.
            </param>
      <param name="callback">
            A delegate to the method that raises the asynchronous event.
            </param>
      <param name="result">
            The result of the asynchronous operation.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEvent``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)">
      <summary>
            Raises the event through a synchronization context with the specified event arguments.
            </summary>
      <param name="operation">
            An AsyncOperation that provides the 
            SynchronizationContext that is used to invoke the event.
            </param>
      <param name="callback">
            A delegate to the method that raises the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments of the event.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEventAsync``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)">
      <summary>
            Asynchronously raises the event through a synchronization context with the specified event arguments.
            </summary>
      <param name="operation">
            An AsyncOperation that provides the 
            SynchronizationContext that is used to invoke the event.
            </param>
      <param name="callback">
            A delegate to the method that raises the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments of the event.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseEventDirect(System.Object,System.Object,System.EventArgs)">
      <summary>
            Raises the event specified by an event key with the specified event arguments without cross-thread synchronization.
            </summary>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <param name="sender">
            The object that generated the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEventDirect``1(System.Object,System.Object,``0)">
      <summary>
            Raises the event specified by an event key with the specified event arguments without cross-thread synchronization.
            </summary>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <param name="sender">
            The object that generated the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments of the event.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseEvent(System.Object,System.Object,System.EventArgs)">
      <summary>
            Raises the event specified by an event key with the specified event arguments.
            </summary>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <param name="sender">
            The object that generated the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseEventAsync(System.Object,System.Object,System.EventArgs)">
      <summary>
            Asynchronously raises the event specified by an event key with the specified event arguments.
            </summary>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <param name="sender">
            The object that generated the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEvent``1(System.Object,System.Object,``0)">
      <summary>
            Raises the event specified by an event key with the specified event arguments.
            </summary>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <param name="sender">
            The object that generated the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments of the event.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEventAsync``1(System.Object,System.Object,``0)">
      <summary>
            Asynchronously raises the event specified by an event key with the specified event arguments.
            </summary>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <param name="sender">
            The object that generated the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments of the event.
            </typeparam>
    </member>
    <member name="P:NationalInstruments.Restricted.CallbackManager.IsDisposed">
      <summary>
            Gets a value indicating if the CallbackManager object has been disposed.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.CallbackManager.IsDiposed">
      <summary>
            Gets a value indicating if the CallbackManager object has been disposed.
            </summary>
    </member>
    <member name="P:NationalInstruments.Restricted.CallbackManager.SynchronizeCallbacks">
      <summary>
            Gets or sets how events and callback delegates are invoked. 
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformSignal">
      <summary>
            Represents a signal of a digital waveform.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignal.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to the specified
            DigitalWaveformSignal.
            </summary>
      <param name="obj">
            The DigitalWaveformSignal to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is a DigitalWaveformSignal that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignal.Equals(NationalInstruments.DigitalWaveformSignal)">
      <summary>
            Returns a value indicating whether this instance is equal to the specified
            DigitalWaveformSignal.
            </summary>
      <param name="signal">
            The DigitalWaveformSignal to compare with this
            instance.
            </param>
      <returns>true if signal (parameter) is a DigitalWaveformSignal that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignal.GetHashCode">
      <summary>
            Returns a hash code for the object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignal.Owner">
      <summary>
            Gets the DigitalWaveform of the sample.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignal.States">
      <summary>
            Gets the collection of digital states that are part of the digital waveform signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignal.Name">
      <summary>
            Gets and sets the name of the digital waveform signal.
            </summary>
    </member>
    <member name="T:NationalInstruments.DataConverter">
      <summary>
            Converts data from one data type to another data type.
            </summary>
    </member>
    <member name="M:NationalInstruments.DataConverter.CanConvert(System.Object,System.Type)">
      <summary>
            Returns if an object can be converted to a specified type.
            </summary>
      <param name="source">
            The object to check in order to verify if a conversion is possible.
            </param>
      <param name="targetType">
            The data type to check in order to verify if source (parameter) can be converted to it.
            </param>
      <returns>true if source (parameter) can be converted to the type specified by targetType (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.DataConverter.CanConvert``1(System.Object)">
      <summary>
            Returns if an object can be converted to the generic type TData.
            </summary>
      <typeparam name="TData">
            The type to check in order to verify if source (parameter) can be converted to it.
            </typeparam>
      <param name="source">
            The object to check in order to verify if a conversion is possible.
            </param>
      <returns>true if source (parameter) can be converted to the generic type TData.
            </returns>
    </member>
    <member name="M:NationalInstruments.DataConverter.Convert(System.Object,System.Type)">
      <summary>
            Returns an object of a specified type that has a value that is equivalent to a specified object.
            </summary>
      <param name="source">
            The object to convert the value of.
            </param>
      <param name="targetType">
            The type to convert the value of source (parameter) to.
            </param>
      <returns>
            An object that is of the type specified by targetType (parameter) and has a value that is equivalent to the value of source (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">source (parameter) is null.
            
            -or-
            targetType (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidCastException">
            Converting source (parameter) to targetType (parameter) cannot produce a meaningful result.
            </exception>
    </member>
    <member name="M:NationalInstruments.DataConverter.Convert``1(System.Object)">
      <summary>
            Returns an object of the generic type, TData, with a value that is equivalent to a specified object.
            </summary>
      <typeparam name="TData">
            The type to convert the value of source (parameter) to.
            </typeparam>
      <param name="source">
            The object to convert the value of.
            </param>
      <returns>
            An object that is of the generic type, TData, and has a value that is equivalent to the value of source (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">source (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidCastException">
            Converting source (parameter) to TData (generic type parameter) cannot produce a meaningful result.
            </exception>
    </member>
    <member name="M:NationalInstruments.DataConverter.Convert``1(System.DateTime)">
      <summary>
            Returns an object of the generic type, TData, with a value that is equivalent to a specified DateTime.
            </summary>
      <typeparam name="TData">
            The type to convert the value of sourceDateTime (parameter) to.
            </typeparam>
      <param name="sourceDateTime">
            The DateTime to convert the value of.
            </param>
      <returns>
            An object that is of the generic type, TData, and has a value that is equivalent to the value of sourceDateTime (parameter).
            </returns>
      <exception cref="T:System.InvalidCastException">
            Converting sourceDateTime (parameter) to TData (generic type parameter) cannot produce a meaningful result.
            </exception>
    </member>
    <member name="M:NationalInstruments.DataConverter.Convert``1(NationalInstruments.PrecisionDateTime)">
      <summary>
            Returns an object of the generic type, TData, that has a value that is equivalent to a specified PrecisionDateTime.
            </summary>
      <typeparam name="TData">
            The type to convert the value of sourcePrecisionDateTime (parameter) to.
            </typeparam>
      <param name="sourcePrecisionDateTime">
            The PrecisionDateTime to convert the value of.
            </param>
      <returns>
            An object that is of the generic type, TData, and has a value that is equivalent to the value of sourcePrecisionDateTime (parameter).
            </returns>
      <exception cref="T:System.InvalidCastException">
            Converting sourcePrecisionDateTime (parameter) to TData (generic type parameter) cannot produce a meaningful result.
            </exception>
    </member>
    <member name="M:NationalInstruments.DataConverter.Convert``1(System.TimeSpan)">
      <summary>
            Returns an object of the generic type, TData, that has a value that is equivalent to a specified TimeSpan.
            </summary>
      <typeparam name="TData">
            The type to convert the value of sourceTimeSpan (parameter) to.
            </typeparam>
      <param name="sourceTimeSpan">
            The TimeSpan to convert the value of.
            </param>
      <returns>
            An object that is of the generic type, TData, and has a value that is equivalent to the value of sourceTimeSpan (parameter).
            </returns>
      <exception cref="T:System.InvalidCastException">
            Converting sourceTimeSpan (parameter) to TData (generic type parameter) cannot produce a meaningful result.
            </exception>
    </member>
    <member name="M:NationalInstruments.DataConverter.Convert``1(NationalInstruments.PrecisionTimeSpan)">
      <summary>
            Returns an object of the generic type, TData, that has a value that is equivalent to a specified PrecisionTimeSpan.
            </summary>
      <typeparam name="TData">
            The type to convert the value of sourcePrecisionTimeSpan (parameter) to.
            </typeparam>
      <param name="sourcePrecisionTimeSpan">
            The PrecisionTimeSpan to convert the value of.
            </param>
      <returns>
            An object that is of the generic type, TData, and has a value that is equivalent to the value of sourcePrecisionTimeSpan (parameter).
            </returns>
      <exception cref="T:System.InvalidCastException">
            Converting sourcePrecisionTimeSpan (parameter) to TData (generic type parameter) cannot produce a meaningful result.
            </exception>
    </member>
    <member name="T:NationalInstruments.AnalogWaveformCollection`1">
      <summary>
            Represents a strongly typed collection of AnalogWaveform&lt;T&gt; objects.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveforms. The following data types are supported by TData (generic type parameter):
            Byte,
            SByte,
            Decimal,
            Single,
            Double,
            Int16,
            UInt16,
            Int32,
            UInt32,
            Int64, and
            UInt64.
            			</typeparam>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformCollection`1.#ctor">
      <summary>
            Initializes a new instance of AnalogWaveformCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformCollection`1.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformCollection`1.CopyTo(NationalInstruments.AnalogWaveform{`0}[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="arrayIndex">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">arrayIndex (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            arrayIndex (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#IEnumerable{NationalInstruments#AnalogWaveform{TData}}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An IEnumerator&lt;T&gt;  that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveform{TData}}#Remove(NationalInstruments.AnalogWaveform{`0})">
      <summary>
            This method is not supported.
            </summary>
      <param name="item">This parameter is not documented because the method is not supported.</param>
      <returns>The return value is not documented because the method is not supported.</returns>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveform{TData}}#Contains(NationalInstruments.AnalogWaveform{`0})">
      <summary>
            Determines whether the ICollection&lt;T&gt; contains a specific value.
            </summary>
      <param name="item">
            The object to locate in the ICollection&lt;T&gt;.
            </param>
      <returns>true if item is found in the ICollection&lt;T&gt;; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveform{TData}}#Clear">
      <summary>
            This method is not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveform{TData}}#Add(NationalInstruments.AnalogWaveform{`0})">
      <summary>
            This method is not supported.
            </summary>
      <param name="item">This parameter is not documented because the method is not supported.</param>
      <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformCollection`1.Channels">
      <summary>
            Gets the number of channels in AnalogWaveformCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformCollection`1.Count">
      <summary>
            Gets the number of analog waveforms in AnalogWaveformCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformCollection`1.Records">
      <summary>
            Gets the number of records in AnalogWaveformCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformCollection`1.Item(System.Int32)">
      <summary>
            Gets the AnalogWaveform&lt;T&gt; at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the AnalogWaveform&lt;T&gt; to locate in the collection.
            Valid values range from zero to Count - 1.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformCollection`1.Item(System.Int32,System.Int32)">
      <summary>
            Gets the AnalogWaveform&lt;T&gt; at the specified indexes. 
            </summary>
      <param name="recordIndex">
            The zero-based record index of the AnalogWaveform&lt;T&gt; to locate in the collection.
            Valid values range from zero to Records - 1.
            </param>
      <param name="channelIndex">
            The zero-based channel index of the AnalogWaveform&lt;T&gt; to locate in the collection.
            Valid values range from zero to Channels - 1.
            </param>
      <exception cref="T:System.IndexOutOfRangeException">recordIndex (parameter) or channelIndex (parameter) is less than zero.
            
            -or-
            

recordIndex (parameter) is greater than or equal to Records.
            


            -or-
            

channelIndex (parameter) is greater than or equal to Channels.
            


            -or-
            recordIndex (parameter) is greater than or equal to Records.
            
            -or-
            channelIndex (parameter) is greater than or equal to Channels.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveform{TData}}#IsReadOnly">
      <summary>
            Gets a value indicating whether the ICollection&lt;T&gt;  is read-only.
            </summary>
    </member>
    <member name="T:NationalInstruments.AnalogWaveform">
      <summary>
            Provides a data type that encapsulates analog data and timing information.
            </summary>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.#ctor(System.Type,System.Int32)">
      <summary>
            Initializes a new instance of AnalogWaveform with the specified sample type and count.
            </summary>
      <param name="sampleType">
            The Type of samples in the AnalogWaveform.
            </param>
      <param name="sampleCount">
            The number of samples in the AnalogWaveform.
            </param>
      <exception cref="T:System.ArgumentException">
            The Type specified by sampleType (parameter) is not supported by AnalogWaveform.
            </exception>
      <exception cref="T:System.ArgumentNullException">sampleType (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.CopySamples(NationalInstruments.AnalogWaveform,NationalInstruments.AnalogWaveform,System.Int32)">
      <summary>
            Copies the data of a source analog waveform to a destination analog waveform.
            </summary>
      <param name="sourceWaveform">
            The source AnalogWaveform.
            </param>
      <param name="destinationWaveform">
            The destination AnalogWaveform.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">sourceWaveform (parameter) is null.
            
            -or-
            destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is greater than the 
            sourceWaveform (parameter) sample count.
            
            -or-
            sampleCount (parameter) is greater than the 
            destinationWaveform (parameter) sample count.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.CopySamples(NationalInstruments.AnalogWaveform,System.Int32,NationalInstruments.AnalogWaveform,System.Int32,System.Int32)">
      <summary>
            Copies the data of a source analog waveform to a destination analog waveform with the specified indexes.
            </summary>
      <param name="sourceWaveform">
            The source AnalogWaveform.
            </param>
      <param name="sourceSampleIndex">
            The source sample index.
            </param>
      <param name="destinationWaveform">
            The destination AnalogWaveform.
            </param>
      <param name="destinationSampleIndex">
            The destination sample index.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">sourceWaveform (parameter) is null.
            
            -or-
            destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sourceSampleIndex (parameter) is less than zero.
            
            -or-
            destinationSampleIndex (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is less than zero.
            
            -or-
            sourceSampleIndex (parameter) plus sampleCount (parameter) is greater than the 
            sourceWaveform (parameter) sample count.
            
            -or-
            destinationSampleIndex (parameter) plus sampleCount (parameter) is greater than the 
            destinationWaveform (parameter) sample count.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.FromArray1D(System.Array)">
      <summary>
            Creates an analog waveform from a one-dimensional array of values.
            </summary>
      <param name="array">
            The one-dimensional array of values.
            </param>
      <returns>
            An AnalogWaveform containing the values.
            </returns>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The rank of array (parameter) is not one.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.FromArray2D(System.Array)">
      <summary>
            Creates an array of analog waveforms from a two-dimensional array of values.
            </summary>
      <param name="array">
            The two-dimensional array of values.
            </param>
      <returns>
            An AnalogWaveform array containing the values.
            </returns>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The rank of array (parameter) is not two.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetRawData">
      <summary>
            Returns the raw analog waveform data.
            </summary>
      <returns>
            The raw analog waveform data.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetRawData(System.Int32,System.Int32)">
      <summary>
            Returns the raw analog waveform data using the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to return.
            </param>
      <returns>
            The raw analog waveform data.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            


            -or-
            

count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) plus count (parameter) is greater than the sample count.
            sampleIndex (parameter) is less than zero.
            
            -or-
            count (parameter) is less than zero.
            
            -or-
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetRawData(System.Int32,System.Int32,System.Array,System.Int32)">
      <summary>
            Copies the raw analog waveform data into an array using the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the raw data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the raw data into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            count (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample count.
            
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetScaledData">
      <summary>
            Returns the scaled analog waveform data.
            </summary>
      <returns>
            The scaled analog waveform data.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetScaledData(System.Int32,System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to return.
            </param>
      <returns>
            The scaled analog waveform data.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            


            -or-
            

count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) plus count (parameter) is greater than the sample count.
            sampleIndex (parameter) is less than zero.
            
            -or-
            count (parameter) is less than zero.
            
            -or-
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetScaledData(System.Int32,System.Int32,System.Double[],System.Int32)">
      <summary>
            Copies the scaled analog waveform data into an array using the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the scaled data into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            count (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample count.
            
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetTimeStamps">
      <summary>
            Retrieves the time stamps from Timing.
            </summary>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using the specified 
            sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using the specified 
            sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.Samples">
      <summary>
            Gets the samples of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.DataType">
      <summary>
            Gets the data type of the samples contained in the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.UnitDescription">
      <summary>
            Gets or sets the unit of measurement, such as volts, of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.Timing">
      <summary>
            Gets or sets the timing information of the analog waveform.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            	The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">SampleIntervalMode is Irregular
            and the number of time stamps in Timing is not equal to
            Count.
            
            -or-
            
            The time stamp values are greater than MaxValue.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.ScaleMode">
      <summary>
            Gets or sets the scale mode of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.ExtendedProperties">
      <summary>
            Gets the extended properties for the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.ChannelName">
      <summary>
            Gets or sets the name of the device channel from which the analog waveform was acquired.
            </summary>
    </member>
    <member name="T:NationalInstruments.IIndicateDisposed">
      <summary>
            Adds a property to indicate whether the disposable object has been disposed.
            </summary>
    </member>
    <member name="P:NationalInstruments.IIndicateDisposed.IsDisposed">
      <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
    </member>
    <member name="T:NationalInstruments.AnalogWaveformSampleCollection">
      <summary>
            Represents a strongly typed collection of AnalogWaveformSample objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection.IndexOf(NationalInstruments.AnalogWaveformSample)">
      <summary>
            Searches for the AnalogWaveformSample and returns the zero-based index of the first
            occurrence.
            </summary>
      <param name="sample">
            The AnalogWaveformSample to locate.
            </param>
      <returns>
            The zero-based index of the first occurrence of sample (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection.CopyTo(NationalInstruments.AnalogWaveformSample[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection.Item(System.Int32)">
      <summary>
            Gets the AnalogWaveformSample at the specified index. 
            </summary>
      <param name="sampleIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            

sampleIndex (parameter) is greater than or equal to count.
            


            -or-
            sampleIndex (parameter) is greater than or equal to count.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection.Count">
      <summary>
            Gets the number of samples in AnalogWaveformSampleCollection.
            </summary>
    </member>
    <member name="T:NationalInstruments.AnalogWaveform`1">
      <summary>
            Provides a data type that encapsulates analog data and timing information.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. The following data types are supported by TData (generic type parameter):
            Byte,
            SByte,
            Decimal,
            Single,
            Double,
            Int16,
            UInt16,
            Int32,
            UInt32,
            Int64, and
            UInt64.
            			</typeparam>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of AnalogWaveform&lt;T&gt; with the specified sample
            count.
            </summary>
      <param name="sampleCount">
            The number of samples in the AnalogWaveform&lt;T&gt;.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of AnalogWaveform&lt;T&gt; with the specified sample
            count and capacity.
            </summary>
      <param name="sampleCount">
            The number of samples in the AnalogWaveform&lt;T&gt;.
            </param>
      <param name="capacity">
            The total capacity of the AnalogWaveform&lt;T&gt;.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            - or -capacity (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">capacity (parameter) is less than sampleCount (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.FromArray1D(`0[])">
      <summary>
            Creates an AnalogWaveform&lt;T&gt; from an array of values.
            </summary>
      <param name="array">
            The array of values.
            </param>
      <returns>
            An AnalogWaveform&lt;T&gt;.
            </returns>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.FromArray2D(`0[0:,0:])">
      <summary>
            Creates an AnalogWaveform&lt;T&gt; array from a two-dimensional array of values.
            </summary>
      <param name="array">
            The two-dimensional array of values.
            </param>
      <returns>
            An AnalogWaveform&lt;T&gt; array.
            </returns>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.CopySamples(NationalInstruments.AnalogWaveform{`0},NationalInstruments.AnalogWaveform{`0},System.Int32)">
      <summary>
            Copies the data of a source analog waveform to a destination analog waveform.
            </summary>
      <param name="sourceWaveform">
            The source AnalogWaveform&lt;T&gt;.
            </param>
      <param name="destinationWaveform">
            The destination AnalogWaveform&lt;T&gt;.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">sourceWaveform (parameter) is null.
            
            -or-
            destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is greater than the 
            sourceWaveform (parameter) sample count.
            
            -or-
            sampleCount (parameter) is greater than the 
            destinationWaveform (parameter) sample count.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.CopySamples(NationalInstruments.AnalogWaveform{`0},System.Int32,NationalInstruments.AnalogWaveform{`0},System.Int32,System.Int32)">
      <summary>
            Copies the data of a source analog waveform to a destination analog waveform with the specified indexes.
            </summary>
      <param name="sourceWaveform">
            The source AnalogWaveform&lt;T&gt;.
            </param>
      <param name="sourceSampleIndex">
            The source sample index.
            </param>
      <param name="destinationWaveform">
            The destination AnalogWaveform&lt;T&gt;.
            </param>
      <param name="destinationSampleIndex">
            The destination sample index.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">sourceWaveform (parameter) is null.
            
            -or-
            destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sourceSampleIndex (parameter) is less than zero.
            
            -or-
            destinationSampleIndex (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is less than zero.
            
            -or-
            sourceSampleIndex (parameter) plus sampleCount (parameter) is greater than the 
            sourceWaveform (parameter) sample count.
            
            -or-
            destinationSampleIndex (parameter) plus sampleCount (parameter) is greater than the 
            destinationWaveform (parameter) sample count.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetRawData">
      <summary>
            Returns the raw analog waveform data.
            </summary>
      <returns>
            The raw analog waveform data.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetRawData(System.Int32,System.Int32)">
      <summary>
            Returns the raw analog waveform data using the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to return.
            </param>
      <returns>
            The raw analog waveform data.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetRawData(System.Int32,System.Int32,`0[],System.Int32)">
      <summary>
            Returns the raw analog waveform data using the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the raw data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the raw data into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetScaledData">
      <summary>
            Returns the scaled analog waveform data.
            </summary>
      <returns>
            The scaled analog waveform data.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetScaledData(System.Int32,System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to return.
            </param>
      <returns>
            The scaled analog waveform data.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetScaledData(System.Int32,System.Int32,System.Double[],System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the scaled data into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps">
      <summary>
            Retrieves the time stamps from Timing.
            </summary>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStamps">
      <summary>
            Retrieves the time stamps from PrecisionTiming.
            </summary>
      <returns>
            A PrecisionDateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using 
            the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps from PrecisionTiming using 
            the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A PrecisionDateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using 
            the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStamps(System.Int32,System.Int32,NationalInstruments.PrecisionDateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps from PrecisionTiming using 
            the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is 
            None.
            
            -or-
            
            The SampleIntervalMode is 
            Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.Append(`0[])">
      <summary>
            Appends data to the analog waveform.
            </summary>
      <param name="data">
            The data to append to the analog waveform.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode property of
            Timing is
            Irregular.
            - or -
            The SampleIntervalMode property of
            PrecisionTiming is
            Irregular.
            </exception>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.Append(`0[],NationalInstruments.PrecisionDateTime[])">
      <summary>
            Appends data and precision time stamps to the analog waveform.
            </summary>
      <param name="data">
            The data to append to the analog waveform.
            </param>
      <param name="timeStamps">
            The precision time stamps to append to the timing of the analog waveform.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode property of
            PrecisionTiming is
            Regular or
            None.
            </exception>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            - or -timeStamps (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The length of data (parameter) is not equal to the length of timeStamps (parameter).
            - or -timeStamps (parameter) are not in ascending order after the time stamps in
            PrecisionTiming.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.Append(`0[],System.DateTime[])">
      <summary>
            Appends data and time stamps to the analog waveform.
            </summary>
      <param name="data">
            The data to append to the analog waveform.
            </param>
      <param name="timeStamps">
            The time stamps to append to the timing of the analog waveform.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode property of
            Timing is
            Regular or 
            None.
            </exception>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            - or -timeStamps (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The length of data (parameter) is not equal to the length of timeStamps (parameter).
            - or -timeStamps (parameter) are not in ascending order after the time stamps in
            Timing.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.Append(NationalInstruments.AnalogWaveform{`0})">
      <summary>
            Appends analog waveform data and time stamps to the current analog waveform.
            </summary>
      <param name="waveform">
            The AnalogWaveform&lt;T&gt; to append to
            the current analog waveform.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode property of
            Timing is
            Irregular and the 
            SampleIntervalMode property of the
            Timing property of
            waveform (parameter) is
            Regular or
            None.
            - or -
            The SampleIntervalMode property of
            Timing is
            Regular or
            None and the 
            SampleIntervalMode property of the
            Timing property of
            waveform (parameter) is
            Irregular.
            - or -
            The SampleIntervalMode property of
            PrecisionTiming is
            Irregular and the 
            SampleIntervalMode property of the
            PrecisionTiming property of
            waveform (parameter) is
            Regular or
            None.
            - or -
            The SampleIntervalMode property of
            PrecisionTiming is
            Regular or
            None and the 
            SampleIntervalMode property of the
            PrecisionTiming property of
            waveform (parameter) is
            Irregular.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The time stamps in waveform (parameter) are not in ascending order after the time stamps
            in Timing or
            PrecisionTiming.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.Append(NationalInstruments.AnalogWaveform{`0}[])">
      <summary>
            Appends analog waveform data and time stamps from an array of waveforms to the current analog waveform.
            </summary>
      <param name="waveforms">
            An array of AnalogWaveform&lt;T&gt; objects to append to
            the current analog waveform.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode property of
            Timing is
            Irregular and the 
            SampleIntervalMode property of the
            Timing property of
            an element in waveforms (parameter) is
            Regular or
            None.
            - or -
            The SampleIntervalMode property of
            Timing is
            Regular or
            None and the 
            SampleIntervalMode property of the
            Timing property of
            an element in waveforms (parameter) is
            Irregular.
            - or -
            The SampleIntervalMode property of
            PrecisionTiming is
            Irregular and the 
            SampleIntervalMode property of the
            PrecisionTiming property of
            an element in waveforms (parameter) is
            Regular or
            None.
            - or -
            The SampleIntervalMode property of
            PrecisionTiming is
            Regular or
            None and the 
            SampleIntervalMode property of the
            PrecisionTiming property of
            an element in waveforms (parameter) is
            Irregular.
            </exception>
      <exception cref="T:System.ArgumentNullException">waveforms (parameter) is null.
            - or -
            An element in waveforms (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The time stamps in the analog waveforms in waveforms (parameter) are not in ascending order after the time stamps
            in Timing or
            PrecisionTiming.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.Samples">
      <summary>
            Gets the samples of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.SampleCount">
      <summary>
            Gets the number of samples in AnalogWaveform&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.ScaleMode">
      <summary>
            Gets or sets the scale mode of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.DataType">
      <summary>
            Gets the data type of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.ChannelName">
      <summary>
            Gets or sets the name of the device channel from which the analog waveform was acquired.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.UnitDescription">
      <summary>
            Gets or sets the unit of measurement, such as volts, of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.Timing">
      <summary>
            Gets or sets the timing information of the analog waveform.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            	The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">SampleIntervalMode is
            Irregular and the number of time stamps in 
            Timing is not equal to
            Count.
            
            -or-
            
            The time stamp values are greater than MaxValue.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming">
      <summary>
            Gets or sets the timing information of the analog waveform with a higher precision
            than Timing.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">SampleIntervalMode is
            Irregular and the number of time stamps in 
            PrecisionTiming is not equal to
            Count.
            
            - or -
            
            The time stamp values are greater than MaxValue.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.IsPrecisionTimingInitialized">
      <summary>
            Gets a value indicating whether the precision timing information for the waveform has been initialized.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties">
      <summary>
            Gets the extended properties for the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.Capacity">
      <summary>
            Gets or sets the total capacity available for AnalogWaveform&lt;T&gt; data.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than SampleCount.
            </exception>
    </member>
    <member name="T:NationalInstruments.ExtendedPropertyDictionary">
      <summary>
            Represents a dictionary of extended properties.
            </summary>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.#ctor">
      <summary>
            Initializes a new instance of ExtendedPropertyDictionary.
            </summary>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the ExtendedPropertyDictionary with the specified info and 
            context.
            </summary>
      <param name="info">
            The data needed to serialize or deserialize an object.
            </param>
      <param name="context">
            The source and destination of a given serialized stream.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Returns the data needed to serialize the ExtendedPropertyDictionary.
            </summary>
      <param name="info">
            A SerializationInfo object containing the information required to serialize the
            ExtendedPropertyDictionary.
            </param>
      <param name="context">
            A StreamingContext object.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.Clear">
      <summary>
            Removes all elements from the extended properties.
            </summary>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.GetEnumerator">
      <summary>
            Returns an IDictionaryEnumerator that iterates through the extended properties.
            </summary>
      <returns>
            an IDictionaryEnumerator for the extended properties.
            </returns>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.Add(System.String,System.Object)">
      <summary>
            Adds an element with the specified key and value to the extended properties.
            </summary>
      <param name="key">
            The String key of the element to add.
            </param>
      <param name="value">
            The value of the element to add. The value can be null.
            </param>
      <exception cref="T:System.ArgumentNullException">key (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            An element with the same key (parameter) already exists in the extended properties.
            </exception>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.Contains(System.String)">
      <summary>
            Determines whether the extended properties contains the specific key.
            </summary>
      <param name="key">
            The String key to locate in the extended properties.
            </param>
      <returns>true if the extended properties contains an element with the specified key (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">key (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.Remove(System.String)">
      <summary>
            Removes the element with the specified key from the extended properties.
            </summary>
      <param name="key">
            The String key of the element to remove.
            </param>
      <exception cref="T:System.ArgumentNullException">key (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.Clone">
      <summary>
            Creates a shallow copy of the extended properties.
            </summary>
      <returns>
            A shallow copy of the extended properties.
            </returns>
    </member>
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.Count">
      <summary>
            Gets the number of key-and-value pairs contained in the extended properties.
            </summary>
    </member>
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.Item(System.String)">
      <summary>
            Gets or sets the value associated with the specified key. 
            </summary>
      <param name="key">
            The String key value.
            </param>
      <exception cref="T:System.ArgumentNullException">key (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.Keys">
      <summary>
            Gets an ICollection containing the keys of the extended properties.
            </summary>
    </member>
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.Values">
      <summary>
            Gets an ICollection containing the values of the extended properties.
            </summary>
    </member>
  </members>
</doc>